// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TursomMsg.proto

#include "TursomMsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace cn {
namespace tursom {
namespace im {
namespace protobuf {
constexpr ImMsg::ImMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msgid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , selfmsg_(false)
  , _oneof_case_{}{}
struct ImMsgDefaultTypeInternal {
  constexpr ImMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImMsgDefaultTypeInternal() {}
  union {
    ImMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImMsgDefaultTypeInternal _ImMsg_default_instance_;
constexpr LoginRequest::LoginRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LoginRequestDefaultTypeInternal {
  constexpr LoginRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginRequestDefaultTypeInternal() {}
  union {
    LoginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
constexpr LoginResult::LoginResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : imuserid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct LoginResultDefaultTypeInternal {
  constexpr LoginResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginResultDefaultTypeInternal() {}
  union {
    LoginResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginResultDefaultTypeInternal _LoginResult_default_instance_;
constexpr MsgContent::MsgContent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct MsgContentDefaultTypeInternal {
  constexpr MsgContentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MsgContentDefaultTypeInternal() {}
  union {
    MsgContent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MsgContentDefaultTypeInternal _MsgContent_default_instance_;
constexpr SendMsgRequest::SendMsgRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : receiver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reqid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_(nullptr){}
struct SendMsgRequestDefaultTypeInternal {
  constexpr SendMsgRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendMsgRequestDefaultTypeInternal() {}
  union {
    SendMsgRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendMsgRequestDefaultTypeInternal _SendMsgRequest_default_instance_;
constexpr SendMsgResponse::SendMsgResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : receiver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reqid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , failmsg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false)
  , failtype_(0)
{}
struct SendMsgResponseDefaultTypeInternal {
  constexpr SendMsgResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendMsgResponseDefaultTypeInternal() {}
  union {
    SendMsgResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendMsgResponseDefaultTypeInternal _SendMsgResponse_default_instance_;
constexpr ChatMsg::ChatMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : receiver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_(nullptr){}
struct ChatMsgDefaultTypeInternal {
  constexpr ChatMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatMsgDefaultTypeInternal() {}
  union {
    ChatMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatMsgDefaultTypeInternal _ChatMsg_default_instance_;
}  // namespace protobuf
}  // namespace im
}  // namespace tursom
}  // namespace cn
namespace cn {
namespace tursom {
namespace im {
namespace protobuf {
bool FailType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FailType_strings[9] = {};

static const char FailType_names[] =
  "GROUP_MUTED"
  "GROUP_NOT_EXIST"
  "GROUP_USER_MUTED"
  "IN_BLACKLIST"
  "MSG_SAVE_FAILURE"
  "TARGET_IS_EMPTY"
  "TARGET_NOT_LOGIN"
  "UNKNOWN"
  "USER_NOT_IN_GROUP";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FailType_entries[] = {
  { {FailType_names + 0, 11}, 6 },
  { {FailType_names + 11, 15}, 5 },
  { {FailType_names + 26, 16}, 7 },
  { {FailType_names + 42, 12}, 1 },
  { {FailType_names + 54, 16}, 3 },
  { {FailType_names + 70, 15}, 4 },
  { {FailType_names + 85, 16}, 2 },
  { {FailType_names + 101, 7}, 0 },
  { {FailType_names + 108, 17}, 8 },
};

static const int FailType_entries_by_number[] = {
  7, // 0 -> UNKNOWN
  3, // 1 -> IN_BLACKLIST
  6, // 2 -> TARGET_NOT_LOGIN
  4, // 3 -> MSG_SAVE_FAILURE
  5, // 4 -> TARGET_IS_EMPTY
  1, // 5 -> GROUP_NOT_EXIST
  0, // 6 -> GROUP_MUTED
  2, // 7 -> GROUP_USER_MUTED
  8, // 8 -> USER_NOT_IN_GROUP
};

const std::string& FailType_Name(
    FailType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FailType_entries,
          FailType_entries_by_number,
          9, FailType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FailType_entries,
      FailType_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FailType_strings[idx].get();
}
bool FailType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FailType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FailType_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<FailType>(int_value);
  }
  return success;
}

// ===================================================================

class ImMsg::_Internal {
 public:
  static const ::cn::tursom::im::protobuf::LoginRequest& loginrequest(const ImMsg* msg);
  static const ::cn::tursom::im::protobuf::LoginResult& loginresult(const ImMsg* msg);
  static const ::cn::tursom::im::protobuf::ChatMsg& chatmsg(const ImMsg* msg);
  static const ::cn::tursom::im::protobuf::SendMsgRequest& sendmsgrequest(const ImMsg* msg);
  static const ::cn::tursom::im::protobuf::SendMsgResponse& sendmsgresponse(const ImMsg* msg);
};

const ::cn::tursom::im::protobuf::LoginRequest&
ImMsg::_Internal::loginrequest(const ImMsg* msg) {
  return *msg->content_.loginrequest_;
}
const ::cn::tursom::im::protobuf::LoginResult&
ImMsg::_Internal::loginresult(const ImMsg* msg) {
  return *msg->content_.loginresult_;
}
const ::cn::tursom::im::protobuf::ChatMsg&
ImMsg::_Internal::chatmsg(const ImMsg* msg) {
  return *msg->content_.chatmsg_;
}
const ::cn::tursom::im::protobuf::SendMsgRequest&
ImMsg::_Internal::sendmsgrequest(const ImMsg* msg) {
  return *msg->content_.sendmsgrequest_;
}
const ::cn::tursom::im::protobuf::SendMsgResponse&
ImMsg::_Internal::sendmsgresponse(const ImMsg* msg) {
  return *msg->content_.sendmsgresponse_;
}
void ImMsg::set_allocated_loginrequest(::cn::tursom::im::protobuf::LoginRequest* loginrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (loginrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loginrequest);
    if (message_arena != submessage_arena) {
      loginrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loginrequest, submessage_arena);
    }
    set_has_loginrequest();
    content_.loginrequest_ = loginrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.tursom.im.protobuf.ImMsg.loginRequest)
}
void ImMsg::set_allocated_loginresult(::cn::tursom::im::protobuf::LoginResult* loginresult) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (loginresult) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loginresult);
    if (message_arena != submessage_arena) {
      loginresult = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loginresult, submessage_arena);
    }
    set_has_loginresult();
    content_.loginresult_ = loginresult;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.tursom.im.protobuf.ImMsg.loginResult)
}
void ImMsg::set_allocated_chatmsg(::cn::tursom::im::protobuf::ChatMsg* chatmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (chatmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chatmsg);
    if (message_arena != submessage_arena) {
      chatmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chatmsg, submessage_arena);
    }
    set_has_chatmsg();
    content_.chatmsg_ = chatmsg;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.tursom.im.protobuf.ImMsg.chatMsg)
}
void ImMsg::set_allocated_sendmsgrequest(::cn::tursom::im::protobuf::SendMsgRequest* sendmsgrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (sendmsgrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sendmsgrequest);
    if (message_arena != submessage_arena) {
      sendmsgrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sendmsgrequest, submessage_arena);
    }
    set_has_sendmsgrequest();
    content_.sendmsgrequest_ = sendmsgrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.tursom.im.protobuf.ImMsg.sendMsgRequest)
}
void ImMsg::set_allocated_sendmsgresponse(::cn::tursom::im::protobuf::SendMsgResponse* sendmsgresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (sendmsgresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sendmsgresponse);
    if (message_arena != submessage_arena) {
      sendmsgresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sendmsgresponse, submessage_arena);
    }
    set_has_sendmsgresponse();
    content_.sendmsgresponse_ = sendmsgresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.tursom.im.protobuf.ImMsg.sendMsgResponse)
}
ImMsg::ImMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cn.tursom.im.protobuf.ImMsg)
}
ImMsg::ImMsg(const ImMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  msgid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msgid().empty()) {
    msgid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msgid(), 
      GetArena());
  }
  selfmsg_ = from.selfmsg_;
  clear_has_content();
  switch (from.content_case()) {
    case kLoginRequest: {
      _internal_mutable_loginrequest()->::cn::tursom::im::protobuf::LoginRequest::MergeFrom(from._internal_loginrequest());
      break;
    }
    case kLoginResult: {
      _internal_mutable_loginresult()->::cn::tursom::im::protobuf::LoginResult::MergeFrom(from._internal_loginresult());
      break;
    }
    case kChatMsg: {
      _internal_mutable_chatmsg()->::cn::tursom::im::protobuf::ChatMsg::MergeFrom(from._internal_chatmsg());
      break;
    }
    case kSendMsgRequest: {
      _internal_mutable_sendmsgrequest()->::cn::tursom::im::protobuf::SendMsgRequest::MergeFrom(from._internal_sendmsgrequest());
      break;
    }
    case kSendMsgResponse: {
      _internal_mutable_sendmsgresponse()->::cn::tursom::im::protobuf::SendMsgResponse::MergeFrom(from._internal_sendmsgresponse());
      break;
    }
    case kHeartBeat: {
      _internal_set_heartbeat(from._internal_heartbeat());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cn.tursom.im.protobuf.ImMsg)
}

void ImMsg::SharedCtor() {
msgid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
selfmsg_ = false;
clear_has_content();
}

ImMsg::~ImMsg() {
  // @@protoc_insertion_point(destructor:cn.tursom.im.protobuf.ImMsg)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ImMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msgid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_content()) {
    clear_content();
  }
}

void ImMsg::ArenaDtor(void* object) {
  ImMsg* _this = reinterpret_cast< ImMsg* >(object);
  (void)_this;
}
void ImMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImMsg::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:cn.tursom.im.protobuf.ImMsg)
  switch (content_case()) {
    case kLoginRequest: {
      if (GetArena() == nullptr) {
        delete content_.loginrequest_;
      }
      break;
    }
    case kLoginResult: {
      if (GetArena() == nullptr) {
        delete content_.loginresult_;
      }
      break;
    }
    case kChatMsg: {
      if (GetArena() == nullptr) {
        delete content_.chatmsg_;
      }
      break;
    }
    case kSendMsgRequest: {
      if (GetArena() == nullptr) {
        delete content_.sendmsgrequest_;
      }
      break;
    }
    case kSendMsgResponse: {
      if (GetArena() == nullptr) {
        delete content_.sendmsgresponse_;
      }
      break;
    }
    case kHeartBeat: {
      content_.heartbeat_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void ImMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.tursom.im.protobuf.ImMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgid_.ClearToEmpty();
  selfmsg_ = false;
  clear_content();
  _internal_metadata_.Clear<std::string>();
}

const char* ImMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msgId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msgid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cn.tursom.im.protobuf.LoginRequest loginRequest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_loginrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cn.tursom.im.protobuf.LoginResult loginResult = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_loginresult(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cn.tursom.im.protobuf.ChatMsg chatMsg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_chatmsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cn.tursom.im.protobuf.SendMsgRequest sendMsgRequest = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sendmsgrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cn.tursom.im.protobuf.SendMsgResponse sendMsgResponse = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sendmsgresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool selfMsg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          selfmsg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string heartBeat = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_heartbeat();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.tursom.im.protobuf.ImMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msgId = 1;
  if (this->msgid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msgid().data(), static_cast<int>(this->_internal_msgid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.tursom.im.protobuf.ImMsg.msgId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msgid(), target);
  }

  // .cn.tursom.im.protobuf.LoginRequest loginRequest = 2;
  if (_internal_has_loginrequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::loginrequest(this), target, stream);
  }

  // .cn.tursom.im.protobuf.LoginResult loginResult = 3;
  if (_internal_has_loginresult()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::loginresult(this), target, stream);
  }

  // .cn.tursom.im.protobuf.ChatMsg chatMsg = 4;
  if (_internal_has_chatmsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::chatmsg(this), target, stream);
  }

  // .cn.tursom.im.protobuf.SendMsgRequest sendMsgRequest = 5;
  if (_internal_has_sendmsgrequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sendmsgrequest(this), target, stream);
  }

  // .cn.tursom.im.protobuf.SendMsgResponse sendMsgResponse = 6;
  if (_internal_has_sendmsgresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::sendmsgresponse(this), target, stream);
  }

  // bool selfMsg = 7;
  if (this->selfmsg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_selfmsg(), target);
  }

  // string heartBeat = 8;
  if (_internal_has_heartbeat()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_heartbeat().data(), static_cast<int>(this->_internal_heartbeat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.tursom.im.protobuf.ImMsg.heartBeat");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_heartbeat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.tursom.im.protobuf.ImMsg)
  return target;
}

size_t ImMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.tursom.im.protobuf.ImMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msgId = 1;
  if (this->msgid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msgid());
  }

  // bool selfMsg = 7;
  if (this->selfmsg() != 0) {
    total_size += 1 + 1;
  }

  switch (content_case()) {
    // .cn.tursom.im.protobuf.LoginRequest loginRequest = 2;
    case kLoginRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.loginrequest_);
      break;
    }
    // .cn.tursom.im.protobuf.LoginResult loginResult = 3;
    case kLoginResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.loginresult_);
      break;
    }
    // .cn.tursom.im.protobuf.ChatMsg chatMsg = 4;
    case kChatMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.chatmsg_);
      break;
    }
    // .cn.tursom.im.protobuf.SendMsgRequest sendMsgRequest = 5;
    case kSendMsgRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.sendmsgrequest_);
      break;
    }
    // .cn.tursom.im.protobuf.SendMsgResponse sendMsgResponse = 6;
    case kSendMsgResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.sendmsgresponse_);
      break;
    }
    // string heartBeat = 8;
    case kHeartBeat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_heartbeat());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImMsg::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ImMsg*>(
      &from));
}

void ImMsg::MergeFrom(const ImMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cn.tursom.im.protobuf.ImMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msgid().size() > 0) {
    _internal_set_msgid(from._internal_msgid());
  }
  if (from.selfmsg() != 0) {
    _internal_set_selfmsg(from._internal_selfmsg());
  }
  switch (from.content_case()) {
    case kLoginRequest: {
      _internal_mutable_loginrequest()->::cn::tursom::im::protobuf::LoginRequest::MergeFrom(from._internal_loginrequest());
      break;
    }
    case kLoginResult: {
      _internal_mutable_loginresult()->::cn::tursom::im::protobuf::LoginResult::MergeFrom(from._internal_loginresult());
      break;
    }
    case kChatMsg: {
      _internal_mutable_chatmsg()->::cn::tursom::im::protobuf::ChatMsg::MergeFrom(from._internal_chatmsg());
      break;
    }
    case kSendMsgRequest: {
      _internal_mutable_sendmsgrequest()->::cn::tursom::im::protobuf::SendMsgRequest::MergeFrom(from._internal_sendmsgrequest());
      break;
    }
    case kSendMsgResponse: {
      _internal_mutable_sendmsgresponse()->::cn::tursom::im::protobuf::SendMsgResponse::MergeFrom(from._internal_sendmsgresponse());
      break;
    }
    case kHeartBeat: {
      _internal_set_heartbeat(from._internal_heartbeat());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void ImMsg::CopyFrom(const ImMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.tursom.im.protobuf.ImMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImMsg::IsInitialized() const {
  return true;
}

void ImMsg::InternalSwap(ImMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  msgid_.Swap(&other->msgid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(selfmsg_, other->selfmsg_);
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string ImMsg::GetTypeName() const {
  return "cn.tursom.im.protobuf.ImMsg";
}


// ===================================================================

class LoginRequest::_Internal {
 public:
};

LoginRequest::LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cn.tursom.im.protobuf.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cn.tursom.im.protobuf.LoginRequest)
}

void LoginRequest::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:cn.tursom.im.protobuf.LoginRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginRequest::ArenaDtor(void* object) {
  LoginRequest* _this = reinterpret_cast< LoginRequest* >(object);
  (void)_this;
}
void LoginRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.tursom.im.protobuf.LoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* LoginRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.tursom.im.protobuf.LoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.tursom.im.protobuf.LoginRequest.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.tursom.im.protobuf.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.tursom.im.protobuf.LoginRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LoginRequest*>(
      &from));
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cn.tursom.im.protobuf.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.tursom.im.protobuf.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string LoginRequest::GetTypeName() const {
  return "cn.tursom.im.protobuf.LoginRequest";
}


// ===================================================================

class LoginResult::_Internal {
 public:
};

LoginResult::LoginResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cn.tursom.im.protobuf.LoginResult)
}
LoginResult::LoginResult(const LoginResult& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  imuserid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imuserid().empty()) {
    imuserid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_imuserid(), 
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:cn.tursom.im.protobuf.LoginResult)
}

void LoginResult::SharedCtor() {
imuserid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
success_ = false;
}

LoginResult::~LoginResult() {
  // @@protoc_insertion_point(destructor:cn.tursom.im.protobuf.LoginResult)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LoginResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  imuserid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginResult::ArenaDtor(void* object) {
  LoginResult* _this = reinterpret_cast< LoginResult* >(object);
  (void)_this;
}
void LoginResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginResult::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.tursom.im.protobuf.LoginResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imuserid_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* LoginResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string imUserId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_imuserid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.tursom.im.protobuf.LoginResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string imUserId = 2;
  if (this->imuserid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imuserid().data(), static_cast<int>(this->_internal_imuserid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.tursom.im.protobuf.LoginResult.imUserId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_imuserid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.tursom.im.protobuf.LoginResult)
  return target;
}

size_t LoginResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.tursom.im.protobuf.LoginResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string imUserId = 2;
  if (this->imuserid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imuserid());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginResult::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LoginResult*>(
      &from));
}

void LoginResult::MergeFrom(const LoginResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cn.tursom.im.protobuf.LoginResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.imuserid().size() > 0) {
    _internal_set_imuserid(from._internal_imuserid());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void LoginResult::CopyFrom(const LoginResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.tursom.im.protobuf.LoginResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResult::IsInitialized() const {
  return true;
}

void LoginResult::InternalSwap(LoginResult* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  imuserid_.Swap(&other->imuserid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

std::string LoginResult::GetTypeName() const {
  return "cn.tursom.im.protobuf.LoginResult";
}


// ===================================================================

class MsgContent::_Internal {
 public:
};

MsgContent::MsgContent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cn.tursom.im.protobuf.MsgContent)
}
MsgContent::MsgContent(const MsgContent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_content();
  switch (from.content_case()) {
    case kMsg: {
      _internal_set_msg(from._internal_msg());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cn.tursom.im.protobuf.MsgContent)
}

void MsgContent::SharedCtor() {
clear_has_content();
}

MsgContent::~MsgContent() {
  // @@protoc_insertion_point(destructor:cn.tursom.im.protobuf.MsgContent)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void MsgContent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_content()) {
    clear_content();
  }
}

void MsgContent::ArenaDtor(void* object) {
  MsgContent* _this = reinterpret_cast< MsgContent* >(object);
  (void)_this;
}
void MsgContent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MsgContent::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:cn.tursom.im.protobuf.MsgContent)
  switch (content_case()) {
    case kMsg: {
      content_.msg_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void MsgContent::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.tursom.im.protobuf.MsgContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_content();
  _internal_metadata_.Clear<std::string>();
}

const char* MsgContent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgContent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.tursom.im.protobuf.MsgContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (_internal_has_msg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.tursom.im.protobuf.MsgContent.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.tursom.im.protobuf.MsgContent)
  return target;
}

size_t MsgContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.tursom.im.protobuf.MsgContent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (content_case()) {
    // string msg = 1;
    case kMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msg());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgContent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MsgContent*>(
      &from));
}

void MsgContent::MergeFrom(const MsgContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cn.tursom.im.protobuf.MsgContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.content_case()) {
    case kMsg: {
      _internal_set_msg(from._internal_msg());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void MsgContent::CopyFrom(const MsgContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.tursom.im.protobuf.MsgContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgContent::IsInitialized() const {
  return true;
}

void MsgContent::InternalSwap(MsgContent* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string MsgContent::GetTypeName() const {
  return "cn.tursom.im.protobuf.MsgContent";
}


// ===================================================================

class SendMsgRequest::_Internal {
 public:
  static const ::cn::tursom::im::protobuf::MsgContent& content(const SendMsgRequest* msg);
};

const ::cn::tursom::im::protobuf::MsgContent&
SendMsgRequest::_Internal::content(const SendMsgRequest* msg) {
  return *msg->content_;
}
SendMsgRequest::SendMsgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cn.tursom.im.protobuf.SendMsgRequest)
}
SendMsgRequest::SendMsgRequest(const SendMsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver().empty()) {
    receiver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver(), 
      GetArena());
  }
  reqid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reqid().empty()) {
    reqid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reqid(), 
      GetArena());
  }
  if (from._internal_has_content()) {
    content_ = new ::cn::tursom::im::protobuf::MsgContent(*from.content_);
  } else {
    content_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cn.tursom.im.protobuf.SendMsgRequest)
}

void SendMsgRequest::SharedCtor() {
receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reqid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
content_ = nullptr;
}

SendMsgRequest::~SendMsgRequest() {
  // @@protoc_insertion_point(destructor:cn.tursom.im.protobuf.SendMsgRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SendMsgRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  receiver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reqid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete content_;
}

void SendMsgRequest::ArenaDtor(void* object) {
  SendMsgRequest* _this = reinterpret_cast< SendMsgRequest* >(object);
  (void)_this;
}
void SendMsgRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.tursom.im.protobuf.SendMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receiver_.ClearToEmpty();
  reqid_.ClearToEmpty();
  if (GetArena() == nullptr && content_ != nullptr) {
    delete content_;
  }
  content_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* SendMsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string receiver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_receiver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reqId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reqid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cn.tursom.im.protobuf.MsgContent content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_content(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendMsgRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.tursom.im.protobuf.SendMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string receiver = 1;
  if (this->receiver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver().data(), static_cast<int>(this->_internal_receiver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.tursom.im.protobuf.SendMsgRequest.receiver");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_receiver(), target);
  }

  // string reqId = 2;
  if (this->reqid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reqid().data(), static_cast<int>(this->_internal_reqid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.tursom.im.protobuf.SendMsgRequest.reqId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reqid(), target);
  }

  // .cn.tursom.im.protobuf.MsgContent content = 3;
  if (this->has_content()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::content(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.tursom.im.protobuf.SendMsgRequest)
  return target;
}

size_t SendMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.tursom.im.protobuf.SendMsgRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string receiver = 1;
  if (this->receiver().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver());
  }

  // string reqId = 2;
  if (this->reqid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reqid());
  }

  // .cn.tursom.im.protobuf.MsgContent content = 3;
  if (this->has_content()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *content_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendMsgRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SendMsgRequest*>(
      &from));
}

void SendMsgRequest::MergeFrom(const SendMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cn.tursom.im.protobuf.SendMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.receiver().size() > 0) {
    _internal_set_receiver(from._internal_receiver());
  }
  if (from.reqid().size() > 0) {
    _internal_set_reqid(from._internal_reqid());
  }
  if (from.has_content()) {
    _internal_mutable_content()->::cn::tursom::im::protobuf::MsgContent::MergeFrom(from._internal_content());
  }
}

void SendMsgRequest::CopyFrom(const SendMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.tursom.im.protobuf.SendMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMsgRequest::IsInitialized() const {
  return true;
}

void SendMsgRequest::InternalSwap(SendMsgRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  receiver_.Swap(&other->receiver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reqid_.Swap(&other->reqid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(content_, other->content_);
}

std::string SendMsgRequest::GetTypeName() const {
  return "cn.tursom.im.protobuf.SendMsgRequest";
}


// ===================================================================

class SendMsgResponse::_Internal {
 public:
};

SendMsgResponse::SendMsgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cn.tursom.im.protobuf.SendMsgResponse)
}
SendMsgResponse::SendMsgResponse(const SendMsgResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver().empty()) {
    receiver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver(), 
      GetArena());
  }
  reqid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reqid().empty()) {
    reqid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reqid(), 
      GetArena());
  }
  failmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_failmsg().empty()) {
    failmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_failmsg(), 
      GetArena());
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&failtype_) -
    reinterpret_cast<char*>(&success_)) + sizeof(failtype_));
  // @@protoc_insertion_point(copy_constructor:cn.tursom.im.protobuf.SendMsgResponse)
}

void SendMsgResponse::SharedCtor() {
receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reqid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
failmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&success_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&failtype_) -
    reinterpret_cast<char*>(&success_)) + sizeof(failtype_));
}

SendMsgResponse::~SendMsgResponse() {
  // @@protoc_insertion_point(destructor:cn.tursom.im.protobuf.SendMsgResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SendMsgResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  receiver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reqid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  failmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendMsgResponse::ArenaDtor(void* object) {
  SendMsgResponse* _this = reinterpret_cast< SendMsgResponse* >(object);
  (void)_this;
}
void SendMsgResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendMsgResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.tursom.im.protobuf.SendMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receiver_.ClearToEmpty();
  reqid_.ClearToEmpty();
  failmsg_.ClearToEmpty();
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failtype_) -
      reinterpret_cast<char*>(&success_)) + sizeof(failtype_));
  _internal_metadata_.Clear<std::string>();
}

const char* SendMsgResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string receiver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_receiver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reqId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reqid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string failMsg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_failmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cn.tursom.im.protobuf.FailType failType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_failtype(static_cast<::cn::tursom::im::protobuf::FailType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendMsgResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.tursom.im.protobuf.SendMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string receiver = 1;
  if (this->receiver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver().data(), static_cast<int>(this->_internal_receiver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.tursom.im.protobuf.SendMsgResponse.receiver");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_receiver(), target);
  }

  // string reqId = 2;
  if (this->reqid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reqid().data(), static_cast<int>(this->_internal_reqid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.tursom.im.protobuf.SendMsgResponse.reqId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reqid(), target);
  }

  // bool success = 3;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  // string failMsg = 4;
  if (this->failmsg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_failmsg().data(), static_cast<int>(this->_internal_failmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.tursom.im.protobuf.SendMsgResponse.failMsg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_failmsg(), target);
  }

  // .cn.tursom.im.protobuf.FailType failType = 5;
  if (this->failtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_failtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.tursom.im.protobuf.SendMsgResponse)
  return target;
}

size_t SendMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.tursom.im.protobuf.SendMsgResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string receiver = 1;
  if (this->receiver().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver());
  }

  // string reqId = 2;
  if (this->reqid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reqid());
  }

  // string failMsg = 4;
  if (this->failmsg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_failmsg());
  }

  // bool success = 3;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // .cn.tursom.im.protobuf.FailType failType = 5;
  if (this->failtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_failtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendMsgResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SendMsgResponse*>(
      &from));
}

void SendMsgResponse::MergeFrom(const SendMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cn.tursom.im.protobuf.SendMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.receiver().size() > 0) {
    _internal_set_receiver(from._internal_receiver());
  }
  if (from.reqid().size() > 0) {
    _internal_set_reqid(from._internal_reqid());
  }
  if (from.failmsg().size() > 0) {
    _internal_set_failmsg(from._internal_failmsg());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.failtype() != 0) {
    _internal_set_failtype(from._internal_failtype());
  }
}

void SendMsgResponse::CopyFrom(const SendMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.tursom.im.protobuf.SendMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMsgResponse::IsInitialized() const {
  return true;
}

void SendMsgResponse::InternalSwap(SendMsgResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  receiver_.Swap(&other->receiver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reqid_.Swap(&other->reqid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  failmsg_.Swap(&other->failmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendMsgResponse, failtype_)
      + sizeof(SendMsgResponse::failtype_)
      - PROTOBUF_FIELD_OFFSET(SendMsgResponse, success_)>(
          reinterpret_cast<char*>(&success_),
          reinterpret_cast<char*>(&other->success_));
}

std::string SendMsgResponse::GetTypeName() const {
  return "cn.tursom.im.protobuf.SendMsgResponse";
}


// ===================================================================

class ChatMsg::_Internal {
 public:
  static const ::cn::tursom::im::protobuf::MsgContent& content(const ChatMsg* msg);
};

const ::cn::tursom::im::protobuf::MsgContent&
ChatMsg::_Internal::content(const ChatMsg* msg) {
  return *msg->content_;
}
ChatMsg::ChatMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cn.tursom.im.protobuf.ChatMsg)
}
ChatMsg::ChatMsg(const ChatMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver().empty()) {
    receiver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver(), 
      GetArena());
  }
  sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sender().empty()) {
    sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender(), 
      GetArena());
  }
  if (from._internal_has_content()) {
    content_ = new ::cn::tursom::im::protobuf::MsgContent(*from.content_);
  } else {
    content_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cn.tursom.im.protobuf.ChatMsg)
}

void ChatMsg::SharedCtor() {
receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
content_ = nullptr;
}

ChatMsg::~ChatMsg() {
  // @@protoc_insertion_point(destructor:cn.tursom.im.protobuf.ChatMsg)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ChatMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  receiver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete content_;
}

void ChatMsg::ArenaDtor(void* object) {
  ChatMsg* _this = reinterpret_cast< ChatMsg* >(object);
  (void)_this;
}
void ChatMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.tursom.im.protobuf.ChatMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receiver_.ClearToEmpty();
  sender_.ClearToEmpty();
  if (GetArena() == nullptr && content_ != nullptr) {
    delete content_;
  }
  content_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* ChatMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string receiver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_receiver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cn.tursom.im.protobuf.MsgContent content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_content(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.tursom.im.protobuf.ChatMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string receiver = 1;
  if (this->receiver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver().data(), static_cast<int>(this->_internal_receiver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.tursom.im.protobuf.ChatMsg.receiver");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_receiver(), target);
  }

  // string sender = 2;
  if (this->sender().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender().data(), static_cast<int>(this->_internal_sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.tursom.im.protobuf.ChatMsg.sender");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sender(), target);
  }

  // .cn.tursom.im.protobuf.MsgContent content = 3;
  if (this->has_content()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::content(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.tursom.im.protobuf.ChatMsg)
  return target;
}

size_t ChatMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.tursom.im.protobuf.ChatMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string receiver = 1;
  if (this->receiver().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver());
  }

  // string sender = 2;
  if (this->sender().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender());
  }

  // .cn.tursom.im.protobuf.MsgContent content = 3;
  if (this->has_content()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *content_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatMsg::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChatMsg*>(
      &from));
}

void ChatMsg::MergeFrom(const ChatMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cn.tursom.im.protobuf.ChatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.receiver().size() > 0) {
    _internal_set_receiver(from._internal_receiver());
  }
  if (from.sender().size() > 0) {
    _internal_set_sender(from._internal_sender());
  }
  if (from.has_content()) {
    _internal_mutable_content()->::cn::tursom::im::protobuf::MsgContent::MergeFrom(from._internal_content());
  }
}

void ChatMsg::CopyFrom(const ChatMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.tursom.im.protobuf.ChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMsg::IsInitialized() const {
  return true;
}

void ChatMsg::InternalSwap(ChatMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  receiver_.Swap(&other->receiver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sender_.Swap(&other->sender_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(content_, other->content_);
}

std::string ChatMsg::GetTypeName() const {
  return "cn.tursom.im.protobuf.ChatMsg";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace im
}  // namespace tursom
}  // namespace cn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cn::tursom::im::protobuf::ImMsg* Arena::CreateMaybeMessage< ::cn::tursom::im::protobuf::ImMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::tursom::im::protobuf::ImMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::tursom::im::protobuf::LoginRequest* Arena::CreateMaybeMessage< ::cn::tursom::im::protobuf::LoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::tursom::im::protobuf::LoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::tursom::im::protobuf::LoginResult* Arena::CreateMaybeMessage< ::cn::tursom::im::protobuf::LoginResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::tursom::im::protobuf::LoginResult >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::tursom::im::protobuf::MsgContent* Arena::CreateMaybeMessage< ::cn::tursom::im::protobuf::MsgContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::tursom::im::protobuf::MsgContent >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::tursom::im::protobuf::SendMsgRequest* Arena::CreateMaybeMessage< ::cn::tursom::im::protobuf::SendMsgRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::tursom::im::protobuf::SendMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::tursom::im::protobuf::SendMsgResponse* Arena::CreateMaybeMessage< ::cn::tursom::im::protobuf::SendMsgResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::tursom::im::protobuf::SendMsgResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::tursom::im::protobuf::ChatMsg* Arena::CreateMaybeMessage< ::cn::tursom::im::protobuf::ChatMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::tursom::im::protobuf::ChatMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
