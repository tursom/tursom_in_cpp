// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TursomMsg.proto

#include "TursomMsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace cn {
    namespace tursom {
        namespace im {
            namespace protobuf {
                constexpr ImMsg::ImMsg(
                        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
                        : msgid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string), selfmsg_(false),
                          _oneof_case_{} {}

                struct ImMsgDefaultTypeInternal {
                    constexpr ImMsgDefaultTypeInternal()
                            : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}

                    ~ImMsgDefaultTypeInternal() {}

                    union {
                        ImMsg _instance;
                    };
                };

                PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImMsgDefaultTypeInternal _ImMsg_default_instance_;

                constexpr LoginRequest::LoginRequest(
                        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
                        : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string) {}

                struct LoginRequestDefaultTypeInternal {
                    constexpr LoginRequestDefaultTypeInternal()
                            : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}

                    ~LoginRequestDefaultTypeInternal() {}

                    union {
                        LoginRequest _instance;
                    };
                };

                PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;

                constexpr LoginResult::LoginResult(
                        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
                        : imuserid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string), success_(false) {}

                struct LoginResultDefaultTypeInternal {
                    constexpr LoginResultDefaultTypeInternal()
                            : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}

                    ~LoginResultDefaultTypeInternal() {}

                    union {
                        LoginResult _instance;
                    };
                };

                PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginResultDefaultTypeInternal _LoginResult_default_instance_;

                constexpr MsgContent::MsgContent(
                        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
                        : _oneof_case_{} {}

                struct MsgContentDefaultTypeInternal {
                    constexpr MsgContentDefaultTypeInternal()
                            : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}

                    ~MsgContentDefaultTypeInternal() {}

                    union {
                        MsgContent _instance;
                    };
                };

                PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MsgContentDefaultTypeInternal _MsgContent_default_instance_;

                constexpr SendMsgRequest::SendMsgRequest(
                        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
                        : receiver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string),
                          reqid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string), content_(nullptr) {}

                struct SendMsgRequestDefaultTypeInternal {
                    constexpr SendMsgRequestDefaultTypeInternal()
                            : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}

                    ~SendMsgRequestDefaultTypeInternal() {}

                    union {
                        SendMsgRequest _instance;
                    };
                };

                PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendMsgRequestDefaultTypeInternal _SendMsgRequest_default_instance_;

                constexpr SendMsgResponse::SendMsgResponse(
                        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
                        : receiver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string),
                          reqid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string),
                          failmsg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string), success_(false),
                          failtype_(0) {}

                struct SendMsgResponseDefaultTypeInternal {
                    constexpr SendMsgResponseDefaultTypeInternal()
                            : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}

                    ~SendMsgResponseDefaultTypeInternal() {}

                    union {
                        SendMsgResponse _instance;
                    };
                };

                PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendMsgResponseDefaultTypeInternal _SendMsgResponse_default_instance_;

                constexpr ChatMsg::ChatMsg(
                        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
                        : receiver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string),
                          sender_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string), content_(nullptr) {}

                struct ChatMsgDefaultTypeInternal {
                    constexpr ChatMsgDefaultTypeInternal()
                            : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}

                    ~ChatMsgDefaultTypeInternal() {}

                    union {
                        ChatMsg _instance;
                    };
                };

                PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatMsgDefaultTypeInternal _ChatMsg_default_instance_;
            }  // namespace protobuf
        }  // namespace im
    }  // namespace tursom
}  // namespace cn
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TursomMsg_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *file_level_enum_descriptors_TursomMsg_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const **file_level_service_descriptors_TursomMsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TursomMsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::ImMsg, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::ImMsg, _oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::ImMsg, msgid_),
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::ImMsg, selfmsg_),
        ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
        ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
        ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
        ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
        ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
        ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::ImMsg, content_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::LoginRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::LoginRequest, token_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::LoginResult, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::LoginResult, success_),
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::LoginResult, imuserid_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::MsgContent, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::MsgContent, _oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::MsgContent, content_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::SendMsgRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::SendMsgRequest, receiver_),
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::SendMsgRequest, reqid_),
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::SendMsgRequest, content_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::SendMsgResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::SendMsgResponse, receiver_),
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::SendMsgResponse, reqid_),
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::SendMsgResponse, success_),
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::SendMsgResponse, failmsg_),
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::SendMsgResponse, failtype_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::ChatMsg, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::ChatMsg, receiver_),
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::ChatMsg, sender_),
        PROTOBUF_FIELD_OFFSET(::cn::tursom::im::protobuf::ChatMsg, content_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0,  -1, sizeof(::cn::tursom::im::protobuf::ImMsg)},
        {14, -1, sizeof(::cn::tursom::im::protobuf::LoginRequest)},
        {20, -1, sizeof(::cn::tursom::im::protobuf::LoginResult)},
        {27, -1, sizeof(::cn::tursom::im::protobuf::MsgContent)},
        {34, -1, sizeof(::cn::tursom::im::protobuf::SendMsgRequest)},
        {42, -1, sizeof(::cn::tursom::im::protobuf::SendMsgResponse)},
        {52, -1, sizeof(::cn::tursom::im::protobuf::ChatMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const *const file_default_instances[] = {
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::cn::tursom::im::protobuf::_ImMsg_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::cn::tursom::im::protobuf::_LoginRequest_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::cn::tursom::im::protobuf::_LoginResult_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::cn::tursom::im::protobuf::_MsgContent_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::cn::tursom::im::protobuf::_SendMsgRequest_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::cn::tursom::im::protobuf::_SendMsgResponse_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::cn::tursom::im::protobuf::_ChatMsg_default_instance_),
};

const char descriptor_table_protodef_TursomMsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
        "\n\017TursomMsg.proto\022\025cn.tursom.im.protobuf"
        "\"\366\002\n\005ImMsg\022\r\n\005msgId\030\001 \001(\t\022\017\n\007selfMsg\030\007 \001"
        "(\010\022;\n\014loginRequest\030\002 \001(\0132#.cn.tursom.im."
        "protobuf.LoginRequestH\000\0229\n\013loginResult\030\003"
        " \001(\0132\".cn.tursom.im.protobuf.LoginResult"
        "H\000\0221\n\007chatMsg\030\004 \001(\0132\036.cn.tursom.im.proto"
        "buf.ChatMsgH\000\022\?\n\016sendMsgRequest\030\005 \001(\0132%."
        "cn.tursom.im.protobuf.SendMsgRequestH\000\022A"
        "\n\017sendMsgResponse\030\006 \001(\0132&.cn.tursom.im.p"
        "rotobuf.SendMsgResponseH\000\022\023\n\theartBeat\030\010"
        " \001(\tH\000B\t\n\007content\"\035\n\014LoginRequest\022\r\n\005tok"
        "en\030\001 \001(\t\"0\n\013LoginResult\022\017\n\007success\030\001 \001(\010"
        "\022\020\n\010imUserId\030\002 \001(\t\"&\n\nMsgContent\022\r\n\003msg\030"
        "\001 \001(\tH\000B\t\n\007content\"e\n\016SendMsgRequest\022\020\n\010"
        "receiver\030\001 \001(\t\022\r\n\005reqId\030\002 \001(\t\0222\n\007content"
        "\030\003 \001(\0132!.cn.tursom.im.protobuf.MsgConten"
        "t\"\207\001\n\017SendMsgResponse\022\020\n\010receiver\030\001 \001(\t\022"
        "\r\n\005reqId\030\002 \001(\t\022\017\n\007success\030\003 \001(\010\022\017\n\007failM"
        "sg\030\004 \001(\t\0221\n\010failType\030\005 \001(\0162\037.cn.tursom.i"
        "m.protobuf.FailType\"_\n\007ChatMsg\022\020\n\010receiv"
        "er\030\001 \001(\t\022\016\n\006sender\030\002 \001(\t\0222\n\007content\030\003 \001("
        "\0132!.cn.tursom.im.protobuf.MsgContent*\275\001\n"
        "\010FailType\022\013\n\007UNKNOWN\020\000\022\020\n\014IN_BLACKLIST\020\001"
        "\022\024\n\020TARGET_NOT_LOGIN\020\002\022\024\n\020MSG_SAVE_FAILU"
        "RE\020\003\022\023\n\017TARGET_IS_EMPTY\020\004\022\023\n\017GROUP_NOT_E"
        "XIST\020\005\022\017\n\013GROUP_MUTED\020\006\022\024\n\020GROUP_USER_MU"
        "TED\020\007\022\025\n\021USER_NOT_IN_GROUP\020\010B#B\tTursomMs"
        "gH\001Z\024./tursom_im_protobufb\006proto3";
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TursomMsg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TursomMsg_2eproto = {
        false, false, 1113, descriptor_table_protodef_TursomMsg_2eproto, "TursomMsg.proto",
        &descriptor_table_TursomMsg_2eproto_once, nullptr, 0, 7,
        schemas, file_default_instances, TableStruct_TursomMsg_2eproto::offsets,
        file_level_metadata_TursomMsg_2eproto, file_level_enum_descriptors_TursomMsg_2eproto,
        file_level_service_descriptors_TursomMsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable *
descriptor_table_TursomMsg_2eproto_getter() {
    return &descriptor_table_TursomMsg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TursomMsg_2eproto(
        &descriptor_table_TursomMsg_2eproto);
namespace cn {
    namespace tursom {
        namespace im {
            namespace protobuf {
                const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *FailType_descriptor() {
                    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TursomMsg_2eproto);
                    return file_level_enum_descriptors_TursomMsg_2eproto[0];
                }

                bool FailType_IsValid(int value) {
                    switch (value) {
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                            return true;
                        default:
                            return false;
                    }
                }


// ===================================================================

                class ImMsg::_Internal {
                public:
                    static const ::cn::tursom::im::protobuf::LoginRequest &loginrequest(const ImMsg *msg);

                    static const ::cn::tursom::im::protobuf::LoginResult &loginresult(const ImMsg *msg);

                    static const ::cn::tursom::im::protobuf::ChatMsg &chatmsg(const ImMsg *msg);

                    static const ::cn::tursom::im::protobuf::SendMsgRequest &sendmsgrequest(const ImMsg *msg);

                    static const ::cn::tursom::im::protobuf::SendMsgResponse &sendmsgresponse(const ImMsg *msg);
                };

                const ::cn::tursom::im::protobuf::LoginRequest &
                ImMsg::_Internal::loginrequest(const ImMsg *msg) {
                    return *msg->content_.loginrequest_;
                }

                const ::cn::tursom::im::protobuf::LoginResult &
                ImMsg::_Internal::loginresult(const ImMsg *msg) {
                    return *msg->content_.loginresult_;
                }

                const ::cn::tursom::im::protobuf::ChatMsg &
                ImMsg::_Internal::chatmsg(const ImMsg *msg) {
                    return *msg->content_.chatmsg_;
                }

                const ::cn::tursom::im::protobuf::SendMsgRequest &
                ImMsg::_Internal::sendmsgrequest(const ImMsg *msg) {
                    return *msg->content_.sendmsgrequest_;
                }

                const ::cn::tursom::im::protobuf::SendMsgResponse &
                ImMsg::_Internal::sendmsgresponse(const ImMsg *msg) {
                    return *msg->content_.sendmsgresponse_;
                }

                void ImMsg::set_allocated_loginrequest(::cn::tursom::im::protobuf::LoginRequest *loginrequest) {
                    ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArenaForAllocation();
                    clear_content();
                    if (loginrequest) {
                        ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
                                ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::cn::tursom::im::protobuf::LoginRequest>::GetOwningArena(
                                        loginrequest);
                        if (message_arena != submessage_arena) {
                            loginrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                                    message_arena, loginrequest, submessage_arena);
                        }
                        set_has_loginrequest();
                        content_.loginrequest_ = loginrequest;
                    }
                    // @@protoc_insertion_point(field_set_allocated:cn.tursom.im.protobuf.ImMsg.loginRequest)
                }

                void ImMsg::set_allocated_loginresult(::cn::tursom::im::protobuf::LoginResult *loginresult) {
                    ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArenaForAllocation();
                    clear_content();
                    if (loginresult) {
                        ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
                                ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::cn::tursom::im::protobuf::LoginResult>::GetOwningArena(
                                        loginresult);
                        if (message_arena != submessage_arena) {
                            loginresult = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                                    message_arena, loginresult, submessage_arena);
                        }
                        set_has_loginresult();
                        content_.loginresult_ = loginresult;
                    }
                    // @@protoc_insertion_point(field_set_allocated:cn.tursom.im.protobuf.ImMsg.loginResult)
                }

                void ImMsg::set_allocated_chatmsg(::cn::tursom::im::protobuf::ChatMsg *chatmsg) {
                    ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArenaForAllocation();
                    clear_content();
                    if (chatmsg) {
                        ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
                                ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::cn::tursom::im::protobuf::ChatMsg>::GetOwningArena(
                                        chatmsg);
                        if (message_arena != submessage_arena) {
                            chatmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                                    message_arena, chatmsg, submessage_arena);
                        }
                        set_has_chatmsg();
                        content_.chatmsg_ = chatmsg;
                    }
                    // @@protoc_insertion_point(field_set_allocated:cn.tursom.im.protobuf.ImMsg.chatMsg)
                }

                void ImMsg::set_allocated_sendmsgrequest(::cn::tursom::im::protobuf::SendMsgRequest *sendmsgrequest) {
                    ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArenaForAllocation();
                    clear_content();
                    if (sendmsgrequest) {
                        ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
                                ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::cn::tursom::im::protobuf::SendMsgRequest>::GetOwningArena(
                                        sendmsgrequest);
                        if (message_arena != submessage_arena) {
                            sendmsgrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                                    message_arena, sendmsgrequest, submessage_arena);
                        }
                        set_has_sendmsgrequest();
                        content_.sendmsgrequest_ = sendmsgrequest;
                    }
                    // @@protoc_insertion_point(field_set_allocated:cn.tursom.im.protobuf.ImMsg.sendMsgRequest)
                }

                void
                ImMsg::set_allocated_sendmsgresponse(::cn::tursom::im::protobuf::SendMsgResponse *sendmsgresponse) {
                    ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArenaForAllocation();
                    clear_content();
                    if (sendmsgresponse) {
                        ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
                                ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::cn::tursom::im::protobuf::SendMsgResponse>::GetOwningArena(
                                        sendmsgresponse);
                        if (message_arena != submessage_arena) {
                            sendmsgresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                                    message_arena, sendmsgresponse, submessage_arena);
                        }
                        set_has_sendmsgresponse();
                        content_.sendmsgresponse_ = sendmsgresponse;
                    }
                    // @@protoc_insertion_point(field_set_allocated:cn.tursom.im.protobuf.ImMsg.sendMsgResponse)
                }

                ImMsg::ImMsg(::PROTOBUF_NAMESPACE_ID::Arena *arena)
                        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
                    SharedCtor();
                    RegisterArenaDtor(arena);
                    // @@protoc_insertion_point(arena_constructor:cn.tursom.im.protobuf.ImMsg)
                }

                ImMsg::ImMsg(const ImMsg &from)
                        : ::PROTOBUF_NAMESPACE_ID::Message() {
                    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
                    msgid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    if (!from._internal_msgid().empty()) {
                        msgid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
                                   from._internal_msgid(),
                                   GetArenaForAllocation());
                    }
                    selfmsg_ = from.selfmsg_;
                    clear_has_content();
                    switch (from.content_case()) {
                        case kLoginRequest: {
                            _internal_mutable_loginrequest()->::cn::tursom::im::protobuf::LoginRequest::MergeFrom(
                                    from._internal_loginrequest());
                            break;
                        }
                        case kLoginResult: {
                            _internal_mutable_loginresult()->::cn::tursom::im::protobuf::LoginResult::MergeFrom(
                                    from._internal_loginresult());
                            break;
                        }
                        case kChatMsg: {
                            _internal_mutable_chatmsg()->::cn::tursom::im::protobuf::ChatMsg::MergeFrom(
                                    from._internal_chatmsg());
                            break;
                        }
                        case kSendMsgRequest: {
                            _internal_mutable_sendmsgrequest()->::cn::tursom::im::protobuf::SendMsgRequest::MergeFrom(
                                    from._internal_sendmsgrequest());
                            break;
                        }
                        case kSendMsgResponse: {
                            _internal_mutable_sendmsgresponse()->::cn::tursom::im::protobuf::SendMsgResponse::MergeFrom(
                                    from._internal_sendmsgresponse());
                            break;
                        }
                        case kHeartBeat: {
                            _internal_set_heartbeat(from._internal_heartbeat());
                            break;
                        }
                        case CONTENT_NOT_SET: {
                            break;
                        }
                    }
                    // @@protoc_insertion_point(copy_constructor:cn.tursom.im.protobuf.ImMsg)
                }

                void ImMsg::SharedCtor() {
                    msgid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    selfmsg_ = false;
                    clear_has_content();
                }

                ImMsg::~ImMsg() {
                    // @@protoc_insertion_point(destructor:cn.tursom.im.protobuf.ImMsg)
                    SharedDtor();
                    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
                }

                void ImMsg::SharedDtor() {
                    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
                    msgid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    if (has_content()) {
                        clear_content();
                    }
                }

                void ImMsg::ArenaDtor(void *object) {
                    ImMsg *_this = reinterpret_cast< ImMsg * >(object);
                    (void) _this;
                }

                void ImMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
                }

                void ImMsg::SetCachedSize(int size) const {
                    _cached_size_.Set(size);
                }

                void ImMsg::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:cn.tursom.im.protobuf.ImMsg)
                    switch (content_case()) {
                        case kLoginRequest: {
                            if (GetArenaForAllocation() == nullptr) {
                                delete content_.loginrequest_;
                            }
                            break;
                        }
                        case kLoginResult: {
                            if (GetArenaForAllocation() == nullptr) {
                                delete content_.loginresult_;
                            }
                            break;
                        }
                        case kChatMsg: {
                            if (GetArenaForAllocation() == nullptr) {
                                delete content_.chatmsg_;
                            }
                            break;
                        }
                        case kSendMsgRequest: {
                            if (GetArenaForAllocation() == nullptr) {
                                delete content_.sendmsgrequest_;
                            }
                            break;
                        }
                        case kSendMsgResponse: {
                            if (GetArenaForAllocation() == nullptr) {
                                delete content_.sendmsgresponse_;
                            }
                            break;
                        }
                        case kHeartBeat: {
                            content_.heartbeat_.Destroy(
                                    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
                                    GetArenaForAllocation());
                            break;
                        }
                        case CONTENT_NOT_SET: {
                            break;
                        }
                    }
                    _oneof_case_[0] = CONTENT_NOT_SET;
                }


                void ImMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.tursom.im.protobuf.ImMsg)
                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    // Prevent compiler warnings about cached_has_bits being unused
                    (void) cached_has_bits;

                    msgid_.ClearToEmpty();
                    selfmsg_ = false;
                    clear_content();
                    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
                }

                const char *
                ImMsg::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
                    while (!ctx->Done(&ptr)) {
                        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                        switch (tag >> 3) {
                            // string msgId = 1;
                            case 1:
                                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
                                    auto str = _internal_mutable_msgid();
                                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str,
                                                                                       "cn.tursom.im.protobuf.ImMsg.msgId"));
                                    CHK_(ptr);
                                } else goto handle_unusual;
                                continue;
                                // .cn.tursom.im.protobuf.LoginRequest loginRequest = 2;
                            case 2:
                                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                                    ptr = ctx->ParseMessage(_internal_mutable_loginrequest(), ptr);
                                    CHK_(ptr);
                                } else goto handle_unusual;
                                continue;
                                // .cn.tursom.im.protobuf.LoginResult loginResult = 3;
                            case 3:
                                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
                                    ptr = ctx->ParseMessage(_internal_mutable_loginresult(), ptr);
                                    CHK_(ptr);
                                } else goto handle_unusual;
                                continue;
                                // .cn.tursom.im.protobuf.ChatMsg chatMsg = 4;
                            case 4:
                                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
                                    ptr = ctx->ParseMessage(_internal_mutable_chatmsg(), ptr);
                                    CHK_(ptr);
                                } else goto handle_unusual;
                                continue;
                                // .cn.tursom.im.protobuf.SendMsgRequest sendMsgRequest = 5;
                            case 5:
                                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
                                    ptr = ctx->ParseMessage(_internal_mutable_sendmsgrequest(), ptr);
                                    CHK_(ptr);
                                } else goto handle_unusual;
                                continue;
                                // .cn.tursom.im.protobuf.SendMsgResponse sendMsgResponse = 6;
                            case 6:
                                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
                                    ptr = ctx->ParseMessage(_internal_mutable_sendmsgresponse(), ptr);
                                    CHK_(ptr);
                                } else goto handle_unusual;
                                continue;
                                // bool selfMsg = 7;
                            case 7:
                                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
                                    selfmsg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                                    CHK_(ptr);
                                } else goto handle_unusual;
                                continue;
                                // string heartBeat = 8;
                            case 8:
                                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
                                    auto str = _internal_mutable_heartbeat();
                                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str,
                                                                                       "cn.tursom.im.protobuf.ImMsg.heartBeat"));
                                    CHK_(ptr);
                                } else goto handle_unusual;
                                continue;
                            default: {
                                handle_unusual:
                                if ((tag == 0) || ((tag & 7) == 4)) {
                                    CHK_(ptr);
                                    ctx->SetLastTag(tag);
                                    goto success;
                                }
                                ptr = UnknownFieldParse(tag,
                                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                                        ptr, ctx);
                                CHK_(ptr != nullptr);
                                continue;
                            }
                        }  // switch
                    }  // while
                    success:
                    return ptr;
                    failure:
                    ptr = nullptr;
                    goto success;
#undef CHK_
                }

                ::PROTOBUF_NAMESPACE_ID::uint8 *ImMsg::_InternalSerialize(
                        ::PROTOBUF_NAMESPACE_ID::uint8 *target,
                        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
                    // @@protoc_insertion_point(serialize_to_array_start:cn.tursom.im.protobuf.ImMsg)
                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    (void) cached_has_bits;

                    // string msgId = 1;
                    if (!this->msgid().empty()) {
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                                this->_internal_msgid().data(), static_cast<int>(this->_internal_msgid().length()),
                                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                                "cn.tursom.im.protobuf.ImMsg.msgId");
                        target = stream->WriteStringMaybeAliased(
                                1, this->_internal_msgid(), target);
                    }

                    // .cn.tursom.im.protobuf.LoginRequest loginRequest = 2;
                    if (_internal_has_loginrequest()) {
                        target = stream->EnsureSpace(target);
                        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                        InternalWriteMessage(
                                2, _Internal::loginrequest(this), target, stream);
                    }

                    // .cn.tursom.im.protobuf.LoginResult loginResult = 3;
                    if (_internal_has_loginresult()) {
                        target = stream->EnsureSpace(target);
                        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                        InternalWriteMessage(
                                3, _Internal::loginresult(this), target, stream);
                    }

                    // .cn.tursom.im.protobuf.ChatMsg chatMsg = 4;
                    if (_internal_has_chatmsg()) {
                        target = stream->EnsureSpace(target);
                        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                        InternalWriteMessage(
                                4, _Internal::chatmsg(this), target, stream);
                    }

                    // .cn.tursom.im.protobuf.SendMsgRequest sendMsgRequest = 5;
                    if (_internal_has_sendmsgrequest()) {
                        target = stream->EnsureSpace(target);
                        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                        InternalWriteMessage(
                                5, _Internal::sendmsgrequest(this), target, stream);
                    }

                    // .cn.tursom.im.protobuf.SendMsgResponse sendMsgResponse = 6;
                    if (_internal_has_sendmsgresponse()) {
                        target = stream->EnsureSpace(target);
                        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                        InternalWriteMessage(
                                6, _Internal::sendmsgresponse(this), target, stream);
                    }

                    // bool selfMsg = 7;
                    if (this->selfmsg() != 0) {
                        target = stream->EnsureSpace(target);
                        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7,
                                                                                                     this->_internal_selfmsg(),
                                                                                                     target);
                    }

                    // string heartBeat = 8;
                    if (_internal_has_heartbeat()) {
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                                this->_internal_heartbeat().data(),
                                static_cast<int>(this->_internal_heartbeat().length()),
                                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                                "cn.tursom.im.protobuf.ImMsg.heartBeat");
                        target = stream->WriteStringMaybeAliased(
                                8, this->_internal_heartbeat(), target);
                    }

                    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
                    }
                    // @@protoc_insertion_point(serialize_to_array_end:cn.tursom.im.protobuf.ImMsg)
                    return target;
                }

                size_t ImMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.tursom.im.protobuf.ImMsg)
                    size_t total_size = 0;

                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    // Prevent compiler warnings about cached_has_bits being unused
                    (void) cached_has_bits;

                    // string msgId = 1;
                    if (!this->msgid().empty()) {
                        total_size += 1 +
                                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                              this->_internal_msgid());
                    }

                    // bool selfMsg = 7;
                    if (this->selfmsg() != 0) {
                        total_size += 1 + 1;
                    }

                    switch (content_case()) {
                        // .cn.tursom.im.protobuf.LoginRequest loginRequest = 2;
                        case kLoginRequest: {
                            total_size += 1 +
                                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                                  *content_.loginrequest_);
                            break;
                        }
                            // .cn.tursom.im.protobuf.LoginResult loginResult = 3;
                        case kLoginResult: {
                            total_size += 1 +
                                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                                  *content_.loginresult_);
                            break;
                        }
                            // .cn.tursom.im.protobuf.ChatMsg chatMsg = 4;
                        case kChatMsg: {
                            total_size += 1 +
                                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                                  *content_.chatmsg_);
                            break;
                        }
                            // .cn.tursom.im.protobuf.SendMsgRequest sendMsgRequest = 5;
                        case kSendMsgRequest: {
                            total_size += 1 +
                                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                                  *content_.sendmsgrequest_);
                            break;
                        }
                            // .cn.tursom.im.protobuf.SendMsgResponse sendMsgResponse = 6;
                        case kSendMsgResponse: {
                            total_size += 1 +
                                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                                  *content_.sendmsgresponse_);
                            break;
                        }
                            // string heartBeat = 8;
                        case kHeartBeat: {
                            total_size += 1 +
                                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                                  this->_internal_heartbeat());
                            break;
                        }
                        case CONTENT_NOT_SET: {
                            break;
                        }
                    }
                    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                                _internal_metadata_, total_size, &_cached_size_);
                    }
                    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
                    SetCachedSize(cached_size);
                    return total_size;
                }

                void ImMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:cn.tursom.im.protobuf.ImMsg)
                    GOOGLE_DCHECK_NE(&from, this);
                    const ImMsg *source =
                            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImMsg>(
                                    &from);
                    if (source == nullptr) {
                        // @@protoc_insertion_point(generalized_merge_from_cast_fail:cn.tursom.im.protobuf.ImMsg)
                        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
                    } else {
                        // @@protoc_insertion_point(generalized_merge_from_cast_success:cn.tursom.im.protobuf.ImMsg)
                        MergeFrom(*source);
                    }
                }

                void ImMsg::MergeFrom(const ImMsg &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cn.tursom.im.protobuf.ImMsg)
                    GOOGLE_DCHECK_NE(&from, this);
                    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    (void) cached_has_bits;

                    if (!from.msgid().empty()) {
                        _internal_set_msgid(from._internal_msgid());
                    }
                    if (from.selfmsg() != 0) {
                        _internal_set_selfmsg(from._internal_selfmsg());
                    }
                    switch (from.content_case()) {
                        case kLoginRequest: {
                            _internal_mutable_loginrequest()->::cn::tursom::im::protobuf::LoginRequest::MergeFrom(
                                    from._internal_loginrequest());
                            break;
                        }
                        case kLoginResult: {
                            _internal_mutable_loginresult()->::cn::tursom::im::protobuf::LoginResult::MergeFrom(
                                    from._internal_loginresult());
                            break;
                        }
                        case kChatMsg: {
                            _internal_mutable_chatmsg()->::cn::tursom::im::protobuf::ChatMsg::MergeFrom(
                                    from._internal_chatmsg());
                            break;
                        }
                        case kSendMsgRequest: {
                            _internal_mutable_sendmsgrequest()->::cn::tursom::im::protobuf::SendMsgRequest::MergeFrom(
                                    from._internal_sendmsgrequest());
                            break;
                        }
                        case kSendMsgResponse: {
                            _internal_mutable_sendmsgresponse()->::cn::tursom::im::protobuf::SendMsgResponse::MergeFrom(
                                    from._internal_sendmsgresponse());
                            break;
                        }
                        case kHeartBeat: {
                            _internal_set_heartbeat(from._internal_heartbeat());
                            break;
                        }
                        case CONTENT_NOT_SET: {
                            break;
                        }
                    }
                }

                void ImMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:cn.tursom.im.protobuf.ImMsg)
                    if (&from == this) return;
                    Clear();
                    MergeFrom(from);
                }

                void ImMsg::CopyFrom(const ImMsg &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.tursom.im.protobuf.ImMsg)
                    if (&from == this) return;
                    Clear();
                    MergeFrom(from);
                }

                bool ImMsg::IsInitialized() const {
                    return true;
                }

                void ImMsg::InternalSwap(ImMsg *other) {
                    using std::swap;
                    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
                    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
                            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                            &msgid_, GetArenaForAllocation(),
                            &other->msgid_, other->GetArenaForAllocation()
                    );
                    swap(selfmsg_, other->selfmsg_);
                    swap(content_, other->content_);
                    swap(_oneof_case_[0], other->_oneof_case_[0]);
                }

                ::PROTOBUF_NAMESPACE_ID::Metadata ImMsg::GetMetadata() const {
                    return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                            &descriptor_table_TursomMsg_2eproto_getter, &descriptor_table_TursomMsg_2eproto_once,
                            file_level_metadata_TursomMsg_2eproto[0]);
                }

// ===================================================================

                class LoginRequest::_Internal {
                public:
                };

                LoginRequest::LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena *arena)
                        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
                    SharedCtor();
                    RegisterArenaDtor(arena);
                    // @@protoc_insertion_point(arena_constructor:cn.tursom.im.protobuf.LoginRequest)
                }

                LoginRequest::LoginRequest(const LoginRequest &from)
                        : ::PROTOBUF_NAMESPACE_ID::Message() {
                    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
                    token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    if (!from._internal_token().empty()) {
                        token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
                                   from._internal_token(),
                                   GetArenaForAllocation());
                    }
                    // @@protoc_insertion_point(copy_constructor:cn.tursom.im.protobuf.LoginRequest)
                }

                void LoginRequest::SharedCtor() {
                    token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                }

                LoginRequest::~LoginRequest() {
                    // @@protoc_insertion_point(destructor:cn.tursom.im.protobuf.LoginRequest)
                    SharedDtor();
                    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
                }

                void LoginRequest::SharedDtor() {
                    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
                    token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                }

                void LoginRequest::ArenaDtor(void *object) {
                    LoginRequest *_this = reinterpret_cast< LoginRequest * >(object);
                    (void) _this;
                }

                void LoginRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
                }

                void LoginRequest::SetCachedSize(int size) const {
                    _cached_size_.Set(size);
                }

                void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.tursom.im.protobuf.LoginRequest)
                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    // Prevent compiler warnings about cached_has_bits being unused
                    (void) cached_has_bits;

                    token_.ClearToEmpty();
                    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
                }

                const char *
                LoginRequest::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
                    while (!ctx->Done(&ptr)) {
                        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                        switch (tag >> 3) {
                            // string token = 1;
                            case 1:
                                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
                                    auto str = _internal_mutable_token();
                                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str,
                                                                                       "cn.tursom.im.protobuf.LoginRequest.token"));
                                    CHK_(ptr);
                                } else goto handle_unusual;
                                continue;
                            default: {
                                handle_unusual:
                                if ((tag == 0) || ((tag & 7) == 4)) {
                                    CHK_(ptr);
                                    ctx->SetLastTag(tag);
                                    goto success;
                                }
                                ptr = UnknownFieldParse(tag,
                                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                                        ptr, ctx);
                                CHK_(ptr != nullptr);
                                continue;
                            }
                        }  // switch
                    }  // while
                    success:
                    return ptr;
                    failure:
                    ptr = nullptr;
                    goto success;
#undef CHK_
                }

                ::PROTOBUF_NAMESPACE_ID::uint8 *LoginRequest::_InternalSerialize(
                        ::PROTOBUF_NAMESPACE_ID::uint8 *target,
                        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
                    // @@protoc_insertion_point(serialize_to_array_start:cn.tursom.im.protobuf.LoginRequest)
                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    (void) cached_has_bits;

                    // string token = 1;
                    if (!this->token().empty()) {
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                                this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
                                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                                "cn.tursom.im.protobuf.LoginRequest.token");
                        target = stream->WriteStringMaybeAliased(
                                1, this->_internal_token(), target);
                    }

                    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
                    }
                    // @@protoc_insertion_point(serialize_to_array_end:cn.tursom.im.protobuf.LoginRequest)
                    return target;
                }

                size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.tursom.im.protobuf.LoginRequest)
                    size_t total_size = 0;

                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    // Prevent compiler warnings about cached_has_bits being unused
                    (void) cached_has_bits;

                    // string token = 1;
                    if (!this->token().empty()) {
                        total_size += 1 +
                                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                              this->_internal_token());
                    }

                    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                                _internal_metadata_, total_size, &_cached_size_);
                    }
                    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
                    SetCachedSize(cached_size);
                    return total_size;
                }

                void LoginRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:cn.tursom.im.protobuf.LoginRequest)
                    GOOGLE_DCHECK_NE(&from, this);
                    const LoginRequest *source =
                            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginRequest>(
                                    &from);
                    if (source == nullptr) {
                        // @@protoc_insertion_point(generalized_merge_from_cast_fail:cn.tursom.im.protobuf.LoginRequest)
                        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
                    } else {
                        // @@protoc_insertion_point(generalized_merge_from_cast_success:cn.tursom.im.protobuf.LoginRequest)
                        MergeFrom(*source);
                    }
                }

                void LoginRequest::MergeFrom(const LoginRequest &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cn.tursom.im.protobuf.LoginRequest)
                    GOOGLE_DCHECK_NE(&from, this);
                    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    (void) cached_has_bits;

                    if (!from.token().empty()) {
                        _internal_set_token(from._internal_token());
                    }
                }

                void LoginRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:cn.tursom.im.protobuf.LoginRequest)
                    if (&from == this) return;
                    Clear();
                    MergeFrom(from);
                }

                void LoginRequest::CopyFrom(const LoginRequest &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.tursom.im.protobuf.LoginRequest)
                    if (&from == this) return;
                    Clear();
                    MergeFrom(from);
                }

                bool LoginRequest::IsInitialized() const {
                    return true;
                }

                void LoginRequest::InternalSwap(LoginRequest *other) {
                    using std::swap;
                    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
                    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
                            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                            &token_, GetArenaForAllocation(),
                            &other->token_, other->GetArenaForAllocation()
                    );
                }

                ::PROTOBUF_NAMESPACE_ID::Metadata LoginRequest::GetMetadata() const {
                    return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                            &descriptor_table_TursomMsg_2eproto_getter, &descriptor_table_TursomMsg_2eproto_once,
                            file_level_metadata_TursomMsg_2eproto[1]);
                }

// ===================================================================

                class LoginResult::_Internal {
                public:
                };

                LoginResult::LoginResult(::PROTOBUF_NAMESPACE_ID::Arena *arena)
                        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
                    SharedCtor();
                    RegisterArenaDtor(arena);
                    // @@protoc_insertion_point(arena_constructor:cn.tursom.im.protobuf.LoginResult)
                }

                LoginResult::LoginResult(const LoginResult &from)
                        : ::PROTOBUF_NAMESPACE_ID::Message() {
                    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
                    imuserid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    if (!from._internal_imuserid().empty()) {
                        imuserid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
                                      from._internal_imuserid(),
                                      GetArenaForAllocation());
                    }
                    success_ = from.success_;
                    // @@protoc_insertion_point(copy_constructor:cn.tursom.im.protobuf.LoginResult)
                }

                void LoginResult::SharedCtor() {
                    imuserid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    success_ = false;
                }

                LoginResult::~LoginResult() {
                    // @@protoc_insertion_point(destructor:cn.tursom.im.protobuf.LoginResult)
                    SharedDtor();
                    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
                }

                void LoginResult::SharedDtor() {
                    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
                    imuserid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                }

                void LoginResult::ArenaDtor(void *object) {
                    LoginResult *_this = reinterpret_cast< LoginResult * >(object);
                    (void) _this;
                }

                void LoginResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
                }

                void LoginResult::SetCachedSize(int size) const {
                    _cached_size_.Set(size);
                }

                void LoginResult::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.tursom.im.protobuf.LoginResult)
                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    // Prevent compiler warnings about cached_has_bits being unused
                    (void) cached_has_bits;

                    imuserid_.ClearToEmpty();
                    success_ = false;
                    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
                }

                const char *
                LoginResult::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
                    while (!ctx->Done(&ptr)) {
                        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                        switch (tag >> 3) {
                            // bool success = 1;
                            case 1:
                                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                                    success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                                    CHK_(ptr);
                                } else goto handle_unusual;
                                continue;
                                // string imUserId = 2;
                            case 2:
                                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                                    auto str = _internal_mutable_imuserid();
                                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str,
                                                                                       "cn.tursom.im.protobuf.LoginResult.imUserId"));
                                    CHK_(ptr);
                                } else goto handle_unusual;
                                continue;
                            default: {
                                handle_unusual:
                                if ((tag == 0) || ((tag & 7) == 4)) {
                                    CHK_(ptr);
                                    ctx->SetLastTag(tag);
                                    goto success;
                                }
                                ptr = UnknownFieldParse(tag,
                                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                                        ptr, ctx);
                                CHK_(ptr != nullptr);
                                continue;
                            }
                        }  // switch
                    }  // while
                    success:
                    return ptr;
                    failure:
                    ptr = nullptr;
                    goto success;
#undef CHK_
                }

                ::PROTOBUF_NAMESPACE_ID::uint8 *LoginResult::_InternalSerialize(
                        ::PROTOBUF_NAMESPACE_ID::uint8 *target,
                        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
                    // @@protoc_insertion_point(serialize_to_array_start:cn.tursom.im.protobuf.LoginResult)
                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    (void) cached_has_bits;

                    // bool success = 1;
                    if (this->success() != 0) {
                        target = stream->EnsureSpace(target);
                        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1,
                                                                                                     this->_internal_success(),
                                                                                                     target);
                    }

                    // string imUserId = 2;
                    if (!this->imuserid().empty()) {
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                                this->_internal_imuserid().data(),
                                static_cast<int>(this->_internal_imuserid().length()),
                                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                                "cn.tursom.im.protobuf.LoginResult.imUserId");
                        target = stream->WriteStringMaybeAliased(
                                2, this->_internal_imuserid(), target);
                    }

                    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
                    }
                    // @@protoc_insertion_point(serialize_to_array_end:cn.tursom.im.protobuf.LoginResult)
                    return target;
                }

                size_t LoginResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.tursom.im.protobuf.LoginResult)
                    size_t total_size = 0;

                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    // Prevent compiler warnings about cached_has_bits being unused
                    (void) cached_has_bits;

                    // string imUserId = 2;
                    if (!this->imuserid().empty()) {
                        total_size += 1 +
                                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                              this->_internal_imuserid());
                    }

                    // bool success = 1;
                    if (this->success() != 0) {
                        total_size += 1 + 1;
                    }

                    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                                _internal_metadata_, total_size, &_cached_size_);
                    }
                    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
                    SetCachedSize(cached_size);
                    return total_size;
                }

                void LoginResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:cn.tursom.im.protobuf.LoginResult)
                    GOOGLE_DCHECK_NE(&from, this);
                    const LoginResult *source =
                            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginResult>(
                                    &from);
                    if (source == nullptr) {
                        // @@protoc_insertion_point(generalized_merge_from_cast_fail:cn.tursom.im.protobuf.LoginResult)
                        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
                    } else {
                        // @@protoc_insertion_point(generalized_merge_from_cast_success:cn.tursom.im.protobuf.LoginResult)
                        MergeFrom(*source);
                    }
                }

                void LoginResult::MergeFrom(const LoginResult &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cn.tursom.im.protobuf.LoginResult)
                    GOOGLE_DCHECK_NE(&from, this);
                    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    (void) cached_has_bits;

                    if (!from.imuserid().empty()) {
                        _internal_set_imuserid(from._internal_imuserid());
                    }
                    if (from.success() != 0) {
                        _internal_set_success(from._internal_success());
                    }
                }

                void LoginResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:cn.tursom.im.protobuf.LoginResult)
                    if (&from == this) return;
                    Clear();
                    MergeFrom(from);
                }

                void LoginResult::CopyFrom(const LoginResult &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.tursom.im.protobuf.LoginResult)
                    if (&from == this) return;
                    Clear();
                    MergeFrom(from);
                }

                bool LoginResult::IsInitialized() const {
                    return true;
                }

                void LoginResult::InternalSwap(LoginResult *other) {
                    using std::swap;
                    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
                    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
                            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                            &imuserid_, GetArenaForAllocation(),
                            &other->imuserid_, other->GetArenaForAllocation()
                    );
                    swap(success_, other->success_);
                }

                ::PROTOBUF_NAMESPACE_ID::Metadata LoginResult::GetMetadata() const {
                    return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                            &descriptor_table_TursomMsg_2eproto_getter, &descriptor_table_TursomMsg_2eproto_once,
                            file_level_metadata_TursomMsg_2eproto[2]);
                }

// ===================================================================

                class MsgContent::_Internal {
                public:
                };

                MsgContent::MsgContent(::PROTOBUF_NAMESPACE_ID::Arena *arena)
                        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
                    SharedCtor();
                    RegisterArenaDtor(arena);
                    // @@protoc_insertion_point(arena_constructor:cn.tursom.im.protobuf.MsgContent)
                }

                MsgContent::MsgContent(const MsgContent &from)
                        : ::PROTOBUF_NAMESPACE_ID::Message() {
                    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
                    clear_has_content();
                    switch (from.content_case()) {
                        case kMsg: {
                            _internal_set_msg(from._internal_msg());
                            break;
                        }
                        case CONTENT_NOT_SET: {
                            break;
                        }
                    }
                    // @@protoc_insertion_point(copy_constructor:cn.tursom.im.protobuf.MsgContent)
                }

                void MsgContent::SharedCtor() {
                    clear_has_content();
                }

                MsgContent::~MsgContent() {
                    // @@protoc_insertion_point(destructor:cn.tursom.im.protobuf.MsgContent)
                    SharedDtor();
                    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
                }

                void MsgContent::SharedDtor() {
                    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
                    if (has_content()) {
                        clear_content();
                    }
                }

                void MsgContent::ArenaDtor(void *object) {
                    MsgContent *_this = reinterpret_cast< MsgContent * >(object);
                    (void) _this;
                }

                void MsgContent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
                }

                void MsgContent::SetCachedSize(int size) const {
                    _cached_size_.Set(size);
                }

                void MsgContent::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:cn.tursom.im.protobuf.MsgContent)
                    switch (content_case()) {
                        case kMsg: {
                            content_.msg_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
                                                  GetArenaForAllocation());
                            break;
                        }
                        case CONTENT_NOT_SET: {
                            break;
                        }
                    }
                    _oneof_case_[0] = CONTENT_NOT_SET;
                }


                void MsgContent::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.tursom.im.protobuf.MsgContent)
                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    // Prevent compiler warnings about cached_has_bits being unused
                    (void) cached_has_bits;

                    clear_content();
                    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
                }

                const char *
                MsgContent::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
                    while (!ctx->Done(&ptr)) {
                        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                        switch (tag >> 3) {
                            // string msg = 1;
                            case 1:
                                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
                                    auto str = _internal_mutable_msg();
                                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str,
                                                                                       "cn.tursom.im.protobuf.MsgContent.msg"));
                                    CHK_(ptr);
                                } else goto handle_unusual;
                                continue;
                            default: {
                                handle_unusual:
                                if ((tag == 0) || ((tag & 7) == 4)) {
                                    CHK_(ptr);
                                    ctx->SetLastTag(tag);
                                    goto success;
                                }
                                ptr = UnknownFieldParse(tag,
                                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                                        ptr, ctx);
                                CHK_(ptr != nullptr);
                                continue;
                            }
                        }  // switch
                    }  // while
                    success:
                    return ptr;
                    failure:
                    ptr = nullptr;
                    goto success;
#undef CHK_
                }

                ::PROTOBUF_NAMESPACE_ID::uint8 *MsgContent::_InternalSerialize(
                        ::PROTOBUF_NAMESPACE_ID::uint8 *target,
                        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
                    // @@protoc_insertion_point(serialize_to_array_start:cn.tursom.im.protobuf.MsgContent)
                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    (void) cached_has_bits;

                    // string msg = 1;
                    if (_internal_has_msg()) {
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                                this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
                                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                                "cn.tursom.im.protobuf.MsgContent.msg");
                        target = stream->WriteStringMaybeAliased(
                                1, this->_internal_msg(), target);
                    }

                    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
                    }
                    // @@protoc_insertion_point(serialize_to_array_end:cn.tursom.im.protobuf.MsgContent)
                    return target;
                }

                size_t MsgContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.tursom.im.protobuf.MsgContent)
                    size_t total_size = 0;

                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    // Prevent compiler warnings about cached_has_bits being unused
                    (void) cached_has_bits;

                    switch (content_case()) {
                        // string msg = 1;
                        case kMsg: {
                            total_size += 1 +
                                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                                  this->_internal_msg());
                            break;
                        }
                        case CONTENT_NOT_SET: {
                            break;
                        }
                    }
                    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                                _internal_metadata_, total_size, &_cached_size_);
                    }
                    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
                    SetCachedSize(cached_size);
                    return total_size;
                }

                void MsgContent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:cn.tursom.im.protobuf.MsgContent)
                    GOOGLE_DCHECK_NE(&from, this);
                    const MsgContent *source =
                            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgContent>(
                                    &from);
                    if (source == nullptr) {
                        // @@protoc_insertion_point(generalized_merge_from_cast_fail:cn.tursom.im.protobuf.MsgContent)
                        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
                    } else {
                        // @@protoc_insertion_point(generalized_merge_from_cast_success:cn.tursom.im.protobuf.MsgContent)
                        MergeFrom(*source);
                    }
                }

                void MsgContent::MergeFrom(const MsgContent &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cn.tursom.im.protobuf.MsgContent)
                    GOOGLE_DCHECK_NE(&from, this);
                    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    (void) cached_has_bits;

                    switch (from.content_case()) {
                        case kMsg: {
                            _internal_set_msg(from._internal_msg());
                            break;
                        }
                        case CONTENT_NOT_SET: {
                            break;
                        }
                    }
                }

                void MsgContent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:cn.tursom.im.protobuf.MsgContent)
                    if (&from == this) return;
                    Clear();
                    MergeFrom(from);
                }

                void MsgContent::CopyFrom(const MsgContent &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.tursom.im.protobuf.MsgContent)
                    if (&from == this) return;
                    Clear();
                    MergeFrom(from);
                }

                bool MsgContent::IsInitialized() const {
                    return true;
                }

                void MsgContent::InternalSwap(MsgContent *other) {
                    using std::swap;
                    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
                    swap(content_, other->content_);
                    swap(_oneof_case_[0], other->_oneof_case_[0]);
                }

                ::PROTOBUF_NAMESPACE_ID::Metadata MsgContent::GetMetadata() const {
                    return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                            &descriptor_table_TursomMsg_2eproto_getter, &descriptor_table_TursomMsg_2eproto_once,
                            file_level_metadata_TursomMsg_2eproto[3]);
                }

// ===================================================================

                class SendMsgRequest::_Internal {
                public:
                    static const ::cn::tursom::im::protobuf::MsgContent &content(const SendMsgRequest *msg);
                };

                const ::cn::tursom::im::protobuf::MsgContent &
                SendMsgRequest::_Internal::content(const SendMsgRequest *msg) {
                    return *msg->content_;
                }

                SendMsgRequest::SendMsgRequest(::PROTOBUF_NAMESPACE_ID::Arena *arena)
                        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
                    SharedCtor();
                    RegisterArenaDtor(arena);
                    // @@protoc_insertion_point(arena_constructor:cn.tursom.im.protobuf.SendMsgRequest)
                }

                SendMsgRequest::SendMsgRequest(const SendMsgRequest &from)
                        : ::PROTOBUF_NAMESPACE_ID::Message() {
                    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
                    receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    if (!from._internal_receiver().empty()) {
                        receiver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
                                      from._internal_receiver(),
                                      GetArenaForAllocation());
                    }
                    reqid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    if (!from._internal_reqid().empty()) {
                        reqid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
                                   from._internal_reqid(),
                                   GetArenaForAllocation());
                    }
                    if (from._internal_has_content()) {
                        content_ = new ::cn::tursom::im::protobuf::MsgContent(*from.content_);
                    } else {
                        content_ = nullptr;
                    }
                    // @@protoc_insertion_point(copy_constructor:cn.tursom.im.protobuf.SendMsgRequest)
                }

                void SendMsgRequest::SharedCtor() {
                    receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    reqid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    content_ = nullptr;
                }

                SendMsgRequest::~SendMsgRequest() {
                    // @@protoc_insertion_point(destructor:cn.tursom.im.protobuf.SendMsgRequest)
                    SharedDtor();
                    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
                }

                void SendMsgRequest::SharedDtor() {
                    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
                    receiver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    reqid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    if (this != internal_default_instance()) delete content_;
                }

                void SendMsgRequest::ArenaDtor(void *object) {
                    SendMsgRequest *_this = reinterpret_cast< SendMsgRequest * >(object);
                    (void) _this;
                }

                void SendMsgRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
                }

                void SendMsgRequest::SetCachedSize(int size) const {
                    _cached_size_.Set(size);
                }

                void SendMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.tursom.im.protobuf.SendMsgRequest)
                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    // Prevent compiler warnings about cached_has_bits being unused
                    (void) cached_has_bits;

                    receiver_.ClearToEmpty();
                    reqid_.ClearToEmpty();
                    if (GetArenaForAllocation() == nullptr && content_ != nullptr) {
                        delete content_;
                    }
                    content_ = nullptr;
                    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
                }

                const char *
                SendMsgRequest::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
                    while (!ctx->Done(&ptr)) {
                        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                        switch (tag >> 3) {
                            // string receiver = 1;
                            case 1:
                                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
                                    auto str = _internal_mutable_receiver();
                                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str,
                                                                                       "cn.tursom.im.protobuf.SendMsgRequest.receiver"));
                                    CHK_(ptr);
                                } else goto handle_unusual;
                                continue;
                                // string reqId = 2;
                            case 2:
                                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                                    auto str = _internal_mutable_reqid();
                                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str,
                                                                                       "cn.tursom.im.protobuf.SendMsgRequest.reqId"));
                                    CHK_(ptr);
                                } else goto handle_unusual;
                                continue;
                                // .cn.tursom.im.protobuf.MsgContent content = 3;
                            case 3:
                                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
                                    ptr = ctx->ParseMessage(_internal_mutable_content(), ptr);
                                    CHK_(ptr);
                                } else goto handle_unusual;
                                continue;
                            default: {
                                handle_unusual:
                                if ((tag == 0) || ((tag & 7) == 4)) {
                                    CHK_(ptr);
                                    ctx->SetLastTag(tag);
                                    goto success;
                                }
                                ptr = UnknownFieldParse(tag,
                                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                                        ptr, ctx);
                                CHK_(ptr != nullptr);
                                continue;
                            }
                        }  // switch
                    }  // while
                    success:
                    return ptr;
                    failure:
                    ptr = nullptr;
                    goto success;
#undef CHK_
                }

                ::PROTOBUF_NAMESPACE_ID::uint8 *SendMsgRequest::_InternalSerialize(
                        ::PROTOBUF_NAMESPACE_ID::uint8 *target,
                        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
                    // @@protoc_insertion_point(serialize_to_array_start:cn.tursom.im.protobuf.SendMsgRequest)
                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    (void) cached_has_bits;

                    // string receiver = 1;
                    if (!this->receiver().empty()) {
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                                this->_internal_receiver().data(),
                                static_cast<int>(this->_internal_receiver().length()),
                                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                                "cn.tursom.im.protobuf.SendMsgRequest.receiver");
                        target = stream->WriteStringMaybeAliased(
                                1, this->_internal_receiver(), target);
                    }

                    // string reqId = 2;
                    if (!this->reqid().empty()) {
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                                this->_internal_reqid().data(), static_cast<int>(this->_internal_reqid().length()),
                                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                                "cn.tursom.im.protobuf.SendMsgRequest.reqId");
                        target = stream->WriteStringMaybeAliased(
                                2, this->_internal_reqid(), target);
                    }

                    // .cn.tursom.im.protobuf.MsgContent content = 3;
                    if (this->has_content()) {
                        target = stream->EnsureSpace(target);
                        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                        InternalWriteMessage(
                                3, _Internal::content(this), target, stream);
                    }

                    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
                    }
                    // @@protoc_insertion_point(serialize_to_array_end:cn.tursom.im.protobuf.SendMsgRequest)
                    return target;
                }

                size_t SendMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.tursom.im.protobuf.SendMsgRequest)
                    size_t total_size = 0;

                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    // Prevent compiler warnings about cached_has_bits being unused
                    (void) cached_has_bits;

                    // string receiver = 1;
                    if (!this->receiver().empty()) {
                        total_size += 1 +
                                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                              this->_internal_receiver());
                    }

                    // string reqId = 2;
                    if (!this->reqid().empty()) {
                        total_size += 1 +
                                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                              this->_internal_reqid());
                    }

                    // .cn.tursom.im.protobuf.MsgContent content = 3;
                    if (this->has_content()) {
                        total_size += 1 +
                                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                              *content_);
                    }

                    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                                _internal_metadata_, total_size, &_cached_size_);
                    }
                    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
                    SetCachedSize(cached_size);
                    return total_size;
                }

                void SendMsgRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:cn.tursom.im.protobuf.SendMsgRequest)
                    GOOGLE_DCHECK_NE(&from, this);
                    const SendMsgRequest *source =
                            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendMsgRequest>(
                                    &from);
                    if (source == nullptr) {
                        // @@protoc_insertion_point(generalized_merge_from_cast_fail:cn.tursom.im.protobuf.SendMsgRequest)
                        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
                    } else {
                        // @@protoc_insertion_point(generalized_merge_from_cast_success:cn.tursom.im.protobuf.SendMsgRequest)
                        MergeFrom(*source);
                    }
                }

                void SendMsgRequest::MergeFrom(const SendMsgRequest &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cn.tursom.im.protobuf.SendMsgRequest)
                    GOOGLE_DCHECK_NE(&from, this);
                    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    (void) cached_has_bits;

                    if (!from.receiver().empty()) {
                        _internal_set_receiver(from._internal_receiver());
                    }
                    if (!from.reqid().empty()) {
                        _internal_set_reqid(from._internal_reqid());
                    }
                    if (from.has_content()) {
                        _internal_mutable_content()->::cn::tursom::im::protobuf::MsgContent::MergeFrom(
                                from._internal_content());
                    }
                }

                void SendMsgRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:cn.tursom.im.protobuf.SendMsgRequest)
                    if (&from == this) return;
                    Clear();
                    MergeFrom(from);
                }

                void SendMsgRequest::CopyFrom(const SendMsgRequest &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.tursom.im.protobuf.SendMsgRequest)
                    if (&from == this) return;
                    Clear();
                    MergeFrom(from);
                }

                bool SendMsgRequest::IsInitialized() const {
                    return true;
                }

                void SendMsgRequest::InternalSwap(SendMsgRequest *other) {
                    using std::swap;
                    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
                    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
                            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                            &receiver_, GetArenaForAllocation(),
                            &other->receiver_, other->GetArenaForAllocation()
                    );
                    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
                            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                            &reqid_, GetArenaForAllocation(),
                            &other->reqid_, other->GetArenaForAllocation()
                    );
                    swap(content_, other->content_);
                }

                ::PROTOBUF_NAMESPACE_ID::Metadata SendMsgRequest::GetMetadata() const {
                    return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                            &descriptor_table_TursomMsg_2eproto_getter, &descriptor_table_TursomMsg_2eproto_once,
                            file_level_metadata_TursomMsg_2eproto[4]);
                }

// ===================================================================

                class SendMsgResponse::_Internal {
                public:
                };

                SendMsgResponse::SendMsgResponse(::PROTOBUF_NAMESPACE_ID::Arena *arena)
                        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
                    SharedCtor();
                    RegisterArenaDtor(arena);
                    // @@protoc_insertion_point(arena_constructor:cn.tursom.im.protobuf.SendMsgResponse)
                }

                SendMsgResponse::SendMsgResponse(const SendMsgResponse &from)
                        : ::PROTOBUF_NAMESPACE_ID::Message() {
                    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
                    receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    if (!from._internal_receiver().empty()) {
                        receiver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
                                      from._internal_receiver(),
                                      GetArenaForAllocation());
                    }
                    reqid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    if (!from._internal_reqid().empty()) {
                        reqid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
                                   from._internal_reqid(),
                                   GetArenaForAllocation());
                    }
                    failmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    if (!from._internal_failmsg().empty()) {
                        failmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
                                     from._internal_failmsg(),
                                     GetArenaForAllocation());
                    }
                    ::memcpy(&success_, &from.success_,
                             static_cast<size_t>(reinterpret_cast<char *>(&failtype_) -
                                                 reinterpret_cast<char *>(&success_)) + sizeof(failtype_));
                    // @@protoc_insertion_point(copy_constructor:cn.tursom.im.protobuf.SendMsgResponse)
                }

                void SendMsgResponse::SharedCtor() {
                    receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    reqid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    failmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    ::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(
                                     reinterpret_cast<char *>(&success_) - reinterpret_cast<char *>(this)),
                             0, static_cast<size_t>(reinterpret_cast<char *>(&failtype_) -
                                                    reinterpret_cast<char *>(&success_)) + sizeof(failtype_));
                }

                SendMsgResponse::~SendMsgResponse() {
                    // @@protoc_insertion_point(destructor:cn.tursom.im.protobuf.SendMsgResponse)
                    SharedDtor();
                    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
                }

                void SendMsgResponse::SharedDtor() {
                    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
                    receiver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    reqid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    failmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                }

                void SendMsgResponse::ArenaDtor(void *object) {
                    SendMsgResponse *_this = reinterpret_cast< SendMsgResponse * >(object);
                    (void) _this;
                }

                void SendMsgResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
                }

                void SendMsgResponse::SetCachedSize(int size) const {
                    _cached_size_.Set(size);
                }

                void SendMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.tursom.im.protobuf.SendMsgResponse)
                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    // Prevent compiler warnings about cached_has_bits being unused
                    (void) cached_has_bits;

                    receiver_.ClearToEmpty();
                    reqid_.ClearToEmpty();
                    failmsg_.ClearToEmpty();
                    ::memset(&success_, 0, static_cast<size_t>(
                                                   reinterpret_cast<char *>(&failtype_) -
                                                   reinterpret_cast<char *>(&success_)) + sizeof(failtype_));
                    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
                }

                const char *
                SendMsgResponse::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
                    while (!ctx->Done(&ptr)) {
                        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                        switch (tag >> 3) {
                            // string receiver = 1;
                            case 1:
                                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
                                    auto str = _internal_mutable_receiver();
                                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str,
                                                                                       "cn.tursom.im.protobuf.SendMsgResponse.receiver"));
                                    CHK_(ptr);
                                } else goto handle_unusual;
                                continue;
                                // string reqId = 2;
                            case 2:
                                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                                    auto str = _internal_mutable_reqid();
                                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str,
                                                                                       "cn.tursom.im.protobuf.SendMsgResponse.reqId"));
                                    CHK_(ptr);
                                } else goto handle_unusual;
                                continue;
                                // bool success = 3;
                            case 3:
                                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
                                    success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                                    CHK_(ptr);
                                } else goto handle_unusual;
                                continue;
                                // string failMsg = 4;
                            case 4:
                                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
                                    auto str = _internal_mutable_failmsg();
                                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str,
                                                                                       "cn.tursom.im.protobuf.SendMsgResponse.failMsg"));
                                    CHK_(ptr);
                                } else goto handle_unusual;
                                continue;
                                // .cn.tursom.im.protobuf.FailType failType = 5;
                            case 5:
                                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
                                    ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(
                                            &ptr);
                                    CHK_(ptr);
                                    _internal_set_failtype(static_cast<::cn::tursom::im::protobuf::FailType>(val));
                                } else goto handle_unusual;
                                continue;
                            default: {
                                handle_unusual:
                                if ((tag == 0) || ((tag & 7) == 4)) {
                                    CHK_(ptr);
                                    ctx->SetLastTag(tag);
                                    goto success;
                                }
                                ptr = UnknownFieldParse(tag,
                                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                                        ptr, ctx);
                                CHK_(ptr != nullptr);
                                continue;
                            }
                        }  // switch
                    }  // while
                    success:
                    return ptr;
                    failure:
                    ptr = nullptr;
                    goto success;
#undef CHK_
                }

                ::PROTOBUF_NAMESPACE_ID::uint8 *SendMsgResponse::_InternalSerialize(
                        ::PROTOBUF_NAMESPACE_ID::uint8 *target,
                        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
                    // @@protoc_insertion_point(serialize_to_array_start:cn.tursom.im.protobuf.SendMsgResponse)
                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    (void) cached_has_bits;

                    // string receiver = 1;
                    if (!this->receiver().empty()) {
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                                this->_internal_receiver().data(),
                                static_cast<int>(this->_internal_receiver().length()),
                                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                                "cn.tursom.im.protobuf.SendMsgResponse.receiver");
                        target = stream->WriteStringMaybeAliased(
                                1, this->_internal_receiver(), target);
                    }

                    // string reqId = 2;
                    if (!this->reqid().empty()) {
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                                this->_internal_reqid().data(), static_cast<int>(this->_internal_reqid().length()),
                                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                                "cn.tursom.im.protobuf.SendMsgResponse.reqId");
                        target = stream->WriteStringMaybeAliased(
                                2, this->_internal_reqid(), target);
                    }

                    // bool success = 3;
                    if (this->success() != 0) {
                        target = stream->EnsureSpace(target);
                        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3,
                                                                                                     this->_internal_success(),
                                                                                                     target);
                    }

                    // string failMsg = 4;
                    if (!this->failmsg().empty()) {
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                                this->_internal_failmsg().data(), static_cast<int>(this->_internal_failmsg().length()),
                                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                                "cn.tursom.im.protobuf.SendMsgResponse.failMsg");
                        target = stream->WriteStringMaybeAliased(
                                4, this->_internal_failmsg(), target);
                    }

                    // .cn.tursom.im.protobuf.FailType failType = 5;
                    if (this->failtype() != 0) {
                        target = stream->EnsureSpace(target);
                        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
                                5, this->_internal_failtype(), target);
                    }

                    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
                    }
                    // @@protoc_insertion_point(serialize_to_array_end:cn.tursom.im.protobuf.SendMsgResponse)
                    return target;
                }

                size_t SendMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.tursom.im.protobuf.SendMsgResponse)
                    size_t total_size = 0;

                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    // Prevent compiler warnings about cached_has_bits being unused
                    (void) cached_has_bits;

                    // string receiver = 1;
                    if (!this->receiver().empty()) {
                        total_size += 1 +
                                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                              this->_internal_receiver());
                    }

                    // string reqId = 2;
                    if (!this->reqid().empty()) {
                        total_size += 1 +
                                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                              this->_internal_reqid());
                    }

                    // string failMsg = 4;
                    if (!this->failmsg().empty()) {
                        total_size += 1 +
                                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                              this->_internal_failmsg());
                    }

                    // bool success = 3;
                    if (this->success() != 0) {
                        total_size += 1 + 1;
                    }

                    // .cn.tursom.im.protobuf.FailType failType = 5;
                    if (this->failtype() != 0) {
                        total_size += 1 +
                                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
                                              this->_internal_failtype());
                    }

                    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                                _internal_metadata_, total_size, &_cached_size_);
                    }
                    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
                    SetCachedSize(cached_size);
                    return total_size;
                }

                void SendMsgResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:cn.tursom.im.protobuf.SendMsgResponse)
                    GOOGLE_DCHECK_NE(&from, this);
                    const SendMsgResponse *source =
                            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendMsgResponse>(
                                    &from);
                    if (source == nullptr) {
                        // @@protoc_insertion_point(generalized_merge_from_cast_fail:cn.tursom.im.protobuf.SendMsgResponse)
                        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
                    } else {
                        // @@protoc_insertion_point(generalized_merge_from_cast_success:cn.tursom.im.protobuf.SendMsgResponse)
                        MergeFrom(*source);
                    }
                }

                void SendMsgResponse::MergeFrom(const SendMsgResponse &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cn.tursom.im.protobuf.SendMsgResponse)
                    GOOGLE_DCHECK_NE(&from, this);
                    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    (void) cached_has_bits;

                    if (!from.receiver().empty()) {
                        _internal_set_receiver(from._internal_receiver());
                    }
                    if (!from.reqid().empty()) {
                        _internal_set_reqid(from._internal_reqid());
                    }
                    if (!from.failmsg().empty()) {
                        _internal_set_failmsg(from._internal_failmsg());
                    }
                    if (from.success() != 0) {
                        _internal_set_success(from._internal_success());
                    }
                    if (from.failtype() != 0) {
                        _internal_set_failtype(from._internal_failtype());
                    }
                }

                void SendMsgResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:cn.tursom.im.protobuf.SendMsgResponse)
                    if (&from == this) return;
                    Clear();
                    MergeFrom(from);
                }

                void SendMsgResponse::CopyFrom(const SendMsgResponse &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.tursom.im.protobuf.SendMsgResponse)
                    if (&from == this) return;
                    Clear();
                    MergeFrom(from);
                }

                bool SendMsgResponse::IsInitialized() const {
                    return true;
                }

                void SendMsgResponse::InternalSwap(SendMsgResponse *other) {
                    using std::swap;
                    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
                    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
                            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                            &receiver_, GetArenaForAllocation(),
                            &other->receiver_, other->GetArenaForAllocation()
                    );
                    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
                            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                            &reqid_, GetArenaForAllocation(),
                            &other->reqid_, other->GetArenaForAllocation()
                    );
                    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
                            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                            &failmsg_, GetArenaForAllocation(),
                            &other->failmsg_, other->GetArenaForAllocation()
                    );
                    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
                            PROTOBUF_FIELD_OFFSET(SendMsgResponse, failtype_)
                            + sizeof(SendMsgResponse::failtype_)
                            - PROTOBUF_FIELD_OFFSET(SendMsgResponse, success_)>(
                            reinterpret_cast<char *>(&success_),
                            reinterpret_cast<char *>(&other->success_));
                }

                ::PROTOBUF_NAMESPACE_ID::Metadata SendMsgResponse::GetMetadata() const {
                    return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                            &descriptor_table_TursomMsg_2eproto_getter, &descriptor_table_TursomMsg_2eproto_once,
                            file_level_metadata_TursomMsg_2eproto[5]);
                }

// ===================================================================

                class ChatMsg::_Internal {
                public:
                    static const ::cn::tursom::im::protobuf::MsgContent &content(const ChatMsg *msg);
                };

                const ::cn::tursom::im::protobuf::MsgContent &
                ChatMsg::_Internal::content(const ChatMsg *msg) {
                    return *msg->content_;
                }

                ChatMsg::ChatMsg(::PROTOBUF_NAMESPACE_ID::Arena *arena)
                        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
                    SharedCtor();
                    RegisterArenaDtor(arena);
                    // @@protoc_insertion_point(arena_constructor:cn.tursom.im.protobuf.ChatMsg)
                }

                ChatMsg::ChatMsg(const ChatMsg &from)
                        : ::PROTOBUF_NAMESPACE_ID::Message() {
                    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
                    receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    if (!from._internal_receiver().empty()) {
                        receiver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
                                      from._internal_receiver(),
                                      GetArenaForAllocation());
                    }
                    sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    if (!from._internal_sender().empty()) {
                        sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
                                    from._internal_sender(),
                                    GetArenaForAllocation());
                    }
                    if (from._internal_has_content()) {
                        content_ = new ::cn::tursom::im::protobuf::MsgContent(*from.content_);
                    } else {
                        content_ = nullptr;
                    }
                    // @@protoc_insertion_point(copy_constructor:cn.tursom.im.protobuf.ChatMsg)
                }

                void ChatMsg::SharedCtor() {
                    receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    content_ = nullptr;
                }

                ChatMsg::~ChatMsg() {
                    // @@protoc_insertion_point(destructor:cn.tursom.im.protobuf.ChatMsg)
                    SharedDtor();
                    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
                }

                void ChatMsg::SharedDtor() {
                    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
                    receiver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    sender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
                    if (this != internal_default_instance()) delete content_;
                }

                void ChatMsg::ArenaDtor(void *object) {
                    ChatMsg *_this = reinterpret_cast< ChatMsg * >(object);
                    (void) _this;
                }

                void ChatMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
                }

                void ChatMsg::SetCachedSize(int size) const {
                    _cached_size_.Set(size);
                }

                void ChatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.tursom.im.protobuf.ChatMsg)
                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    // Prevent compiler warnings about cached_has_bits being unused
                    (void) cached_has_bits;

                    receiver_.ClearToEmpty();
                    sender_.ClearToEmpty();
                    if (GetArenaForAllocation() == nullptr && content_ != nullptr) {
                        delete content_;
                    }
                    content_ = nullptr;
                    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
                }

                const char *
                ChatMsg::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
                    while (!ctx->Done(&ptr)) {
                        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                        switch (tag >> 3) {
                            // string receiver = 1;
                            case 1:
                                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
                                    auto str = _internal_mutable_receiver();
                                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str,
                                                                                       "cn.tursom.im.protobuf.ChatMsg.receiver"));
                                    CHK_(ptr);
                                } else goto handle_unusual;
                                continue;
                                // string sender = 2;
                            case 2:
                                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                                    auto str = _internal_mutable_sender();
                                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str,
                                                                                       "cn.tursom.im.protobuf.ChatMsg.sender"));
                                    CHK_(ptr);
                                } else goto handle_unusual;
                                continue;
                                // .cn.tursom.im.protobuf.MsgContent content = 3;
                            case 3:
                                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
                                    ptr = ctx->ParseMessage(_internal_mutable_content(), ptr);
                                    CHK_(ptr);
                                } else goto handle_unusual;
                                continue;
                            default: {
                                handle_unusual:
                                if ((tag == 0) || ((tag & 7) == 4)) {
                                    CHK_(ptr);
                                    ctx->SetLastTag(tag);
                                    goto success;
                                }
                                ptr = UnknownFieldParse(tag,
                                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                                        ptr, ctx);
                                CHK_(ptr != nullptr);
                                continue;
                            }
                        }  // switch
                    }  // while
                    success:
                    return ptr;
                    failure:
                    ptr = nullptr;
                    goto success;
#undef CHK_
                }

                ::PROTOBUF_NAMESPACE_ID::uint8 *ChatMsg::_InternalSerialize(
                        ::PROTOBUF_NAMESPACE_ID::uint8 *target,
                        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
                    // @@protoc_insertion_point(serialize_to_array_start:cn.tursom.im.protobuf.ChatMsg)
                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    (void) cached_has_bits;

                    // string receiver = 1;
                    if (!this->receiver().empty()) {
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                                this->_internal_receiver().data(),
                                static_cast<int>(this->_internal_receiver().length()),
                                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                                "cn.tursom.im.protobuf.ChatMsg.receiver");
                        target = stream->WriteStringMaybeAliased(
                                1, this->_internal_receiver(), target);
                    }

                    // string sender = 2;
                    if (!this->sender().empty()) {
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                                this->_internal_sender().data(), static_cast<int>(this->_internal_sender().length()),
                                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                                "cn.tursom.im.protobuf.ChatMsg.sender");
                        target = stream->WriteStringMaybeAliased(
                                2, this->_internal_sender(), target);
                    }

                    // .cn.tursom.im.protobuf.MsgContent content = 3;
                    if (this->has_content()) {
                        target = stream->EnsureSpace(target);
                        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                        InternalWriteMessage(
                                3, _Internal::content(this), target, stream);
                    }

                    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
                    }
                    // @@protoc_insertion_point(serialize_to_array_end:cn.tursom.im.protobuf.ChatMsg)
                    return target;
                }

                size_t ChatMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.tursom.im.protobuf.ChatMsg)
                    size_t total_size = 0;

                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    // Prevent compiler warnings about cached_has_bits being unused
                    (void) cached_has_bits;

                    // string receiver = 1;
                    if (!this->receiver().empty()) {
                        total_size += 1 +
                                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                              this->_internal_receiver());
                    }

                    // string sender = 2;
                    if (!this->sender().empty()) {
                        total_size += 1 +
                                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                              this->_internal_sender());
                    }

                    // .cn.tursom.im.protobuf.MsgContent content = 3;
                    if (this->has_content()) {
                        total_size += 1 +
                                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                              *content_);
                    }

                    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                                _internal_metadata_, total_size, &_cached_size_);
                    }
                    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
                    SetCachedSize(cached_size);
                    return total_size;
                }

                void ChatMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:cn.tursom.im.protobuf.ChatMsg)
                    GOOGLE_DCHECK_NE(&from, this);
                    const ChatMsg *source =
                            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatMsg>(
                                    &from);
                    if (source == nullptr) {
                        // @@protoc_insertion_point(generalized_merge_from_cast_fail:cn.tursom.im.protobuf.ChatMsg)
                        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
                    } else {
                        // @@protoc_insertion_point(generalized_merge_from_cast_success:cn.tursom.im.protobuf.ChatMsg)
                        MergeFrom(*source);
                    }
                }

                void ChatMsg::MergeFrom(const ChatMsg &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cn.tursom.im.protobuf.ChatMsg)
                    GOOGLE_DCHECK_NE(&from, this);
                    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
                    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
                    (void) cached_has_bits;

                    if (!from.receiver().empty()) {
                        _internal_set_receiver(from._internal_receiver());
                    }
                    if (!from.sender().empty()) {
                        _internal_set_sender(from._internal_sender());
                    }
                    if (from.has_content()) {
                        _internal_mutable_content()->::cn::tursom::im::protobuf::MsgContent::MergeFrom(
                                from._internal_content());
                    }
                }

                void ChatMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:cn.tursom.im.protobuf.ChatMsg)
                    if (&from == this) return;
                    Clear();
                    MergeFrom(from);
                }

                void ChatMsg::CopyFrom(const ChatMsg &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.tursom.im.protobuf.ChatMsg)
                    if (&from == this) return;
                    Clear();
                    MergeFrom(from);
                }

                bool ChatMsg::IsInitialized() const {
                    return true;
                }

                void ChatMsg::InternalSwap(ChatMsg *other) {
                    using std::swap;
                    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
                    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
                            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                            &receiver_, GetArenaForAllocation(),
                            &other->receiver_, other->GetArenaForAllocation()
                    );
                    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
                            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                            &sender_, GetArenaForAllocation(),
                            &other->sender_, other->GetArenaForAllocation()
                    );
                    swap(content_, other->content_);
                }

                ::PROTOBUF_NAMESPACE_ID::Metadata ChatMsg::GetMetadata() const {
                    return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                            &descriptor_table_TursomMsg_2eproto_getter, &descriptor_table_TursomMsg_2eproto_once,
                            file_level_metadata_TursomMsg_2eproto[6]);
                }

// @@protoc_insertion_point(namespace_scope)
            }  // namespace protobuf
        }  // namespace im
    }  // namespace tursom
}  // namespace cn
PROTOBUF_NAMESPACE_OPEN
        template<>
        PROTOBUF_NOINLINE ::cn::tursom::im::protobuf::ImMsg *
        Arena::CreateMaybeMessage<::cn::tursom::im::protobuf::ImMsg>(Arena *arena) {
            return Arena::CreateMessageInternal<::cn::tursom::im::protobuf::ImMsg>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::cn::tursom::im::protobuf::LoginRequest *
        Arena::CreateMaybeMessage<::cn::tursom::im::protobuf::LoginRequest>(Arena *arena) {
            return Arena::CreateMessageInternal<::cn::tursom::im::protobuf::LoginRequest>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::cn::tursom::im::protobuf::LoginResult *
        Arena::CreateMaybeMessage<::cn::tursom::im::protobuf::LoginResult>(Arena *arena) {
            return Arena::CreateMessageInternal<::cn::tursom::im::protobuf::LoginResult>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::cn::tursom::im::protobuf::MsgContent *
        Arena::CreateMaybeMessage<::cn::tursom::im::protobuf::MsgContent>(Arena *arena) {
            return Arena::CreateMessageInternal<::cn::tursom::im::protobuf::MsgContent>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::cn::tursom::im::protobuf::SendMsgRequest *
        Arena::CreateMaybeMessage<::cn::tursom::im::protobuf::SendMsgRequest>(Arena *arena) {
            return Arena::CreateMessageInternal<::cn::tursom::im::protobuf::SendMsgRequest>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::cn::tursom::im::protobuf::SendMsgResponse *
        Arena::CreateMaybeMessage<::cn::tursom::im::protobuf::SendMsgResponse>(Arena *arena) {
            return Arena::CreateMessageInternal<::cn::tursom::im::protobuf::SendMsgResponse>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::cn::tursom::im::protobuf::ChatMsg *
        Arena::CreateMaybeMessage<::cn::tursom::im::protobuf::ChatMsg>(Arena *arena) {
            return Arena::CreateMessageInternal<::cn::tursom::im::protobuf::ChatMsg>(arena);
        }
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
