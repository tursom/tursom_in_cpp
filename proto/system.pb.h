// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_system_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_system_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_system_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_system_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace cn {
namespace tursom {
namespace im {
namespace protobuf {
class ImToken;
struct ImTokenDefaultTypeInternal;
extern ImTokenDefaultTypeInternal _ImToken_default_instance_;
}  // namespace protobuf
}  // namespace im
}  // namespace tursom
}  // namespace cn
PROTOBUF_NAMESPACE_OPEN
template<> ::cn::tursom::im::protobuf::ImToken* Arena::CreateMaybeMessage<::cn::tursom::im::protobuf::ImToken>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cn {
namespace tursom {
namespace im {
namespace protobuf {

// ===================================================================

class ImToken PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:cn.tursom.im.protobuf.ImToken) */ {
 public:
  inline ImToken() : ImToken(nullptr) {}
  virtual ~ImToken();
  explicit constexpr ImToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImToken(const ImToken& from);
  ImToken(ImToken&& from) noexcept
    : ImToken() {
    *this = ::std::move(from);
  }

  inline ImToken& operator=(const ImToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImToken& operator=(ImToken&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ImToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImToken* internal_default_instance() {
    return reinterpret_cast<const ImToken*>(
               &_ImToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImToken& a, ImToken& b) {
    a.Swap(&b);
  }
  inline void Swap(ImToken* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImToken* New() const final {
    return CreateMaybeMessage<ImToken>(nullptr);
  }

  ImToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImToken>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ImToken& from);
  void MergeFrom(const ImToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.tursom.im.protobuf.ImToken";
  }
  protected:
  explicit ImToken(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 2,
    kSigFieldNumber = 1,
  };
  // string uid = 2;
  void clear_uid();
  const std::string& uid() const;
  void set_uid(const std::string& value);
  void set_uid(std::string&& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  std::string* mutable_uid();
  std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // uint64 sig = 1;
  void clear_sig();
  ::PROTOBUF_NAMESPACE_ID::uint64 sig() const;
  void set_sig(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sig() const;
  void _internal_set_sig(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:cn.tursom.im.protobuf.ImToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sig_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_system_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImToken

// uint64 sig = 1;
inline void ImToken::clear_sig() {
  sig_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImToken::_internal_sig() const {
  return sig_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImToken::sig() const {
  // @@protoc_insertion_point(field_get:cn.tursom.im.protobuf.ImToken.sig)
  return _internal_sig();
}
inline void ImToken::_internal_set_sig(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sig_ = value;
}
inline void ImToken::set_sig(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sig(value);
  // @@protoc_insertion_point(field_set:cn.tursom.im.protobuf.ImToken.sig)
}

// string uid = 2;
inline void ImToken::clear_uid() {
  uid_.ClearToEmpty();
}
inline const std::string& ImToken::uid() const {
  // @@protoc_insertion_point(field_get:cn.tursom.im.protobuf.ImToken.uid)
  return _internal_uid();
}
inline void ImToken::set_uid(const std::string& value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:cn.tursom.im.protobuf.ImToken.uid)
}
inline std::string* ImToken::mutable_uid() {
  // @@protoc_insertion_point(field_mutable:cn.tursom.im.protobuf.ImToken.uid)
  return _internal_mutable_uid();
}
inline const std::string& ImToken::_internal_uid() const {
  return uid_.Get();
}
inline void ImToken::_internal_set_uid(const std::string& value) {
  
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImToken::set_uid(std::string&& value) {
  
  uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cn.tursom.im.protobuf.ImToken.uid)
}
inline void ImToken::set_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:cn.tursom.im.protobuf.ImToken.uid)
}
inline void ImToken::set_uid(const char* value,
    size_t size) {
  
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cn.tursom.im.protobuf.ImToken.uid)
}
inline std::string* ImToken::_internal_mutable_uid() {
  
  return uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImToken::release_uid() {
  // @@protoc_insertion_point(field_release:cn.tursom.im.protobuf.ImToken.uid)
  return uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImToken::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cn.tursom.im.protobuf.ImToken.uid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace im
}  // namespace tursom
}  // namespace cn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_system_2eproto
