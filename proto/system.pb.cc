// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system.proto

#include "system.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace cn {
namespace tursom {
namespace im {
namespace protobuf {
constexpr ImToken::ImToken(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sig_(PROTOBUF_ULONGLONG(0)){}
struct ImTokenDefaultTypeInternal {
  constexpr ImTokenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImTokenDefaultTypeInternal() {}
  union {
    ImToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImTokenDefaultTypeInternal _ImToken_default_instance_;
}  // namespace protobuf
}  // namespace im
}  // namespace tursom
}  // namespace cn
namespace cn {
namespace tursom {
namespace im {
namespace protobuf {

// ===================================================================

class ImToken::_Internal {
 public:
};

ImToken::ImToken(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cn.tursom.im.protobuf.ImToken)
}
ImToken::ImToken(const ImToken& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uid().empty()) {
    uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uid(), 
      GetArena());
  }
  sig_ = from.sig_;
  // @@protoc_insertion_point(copy_constructor:cn.tursom.im.protobuf.ImToken)
}

void ImToken::SharedCtor() {
uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sig_ = PROTOBUF_ULONGLONG(0);
}

ImToken::~ImToken() {
  // @@protoc_insertion_point(destructor:cn.tursom.im.protobuf.ImToken)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ImToken::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImToken::ArenaDtor(void* object) {
  ImToken* _this = reinterpret_cast< ImToken* >(object);
  (void)_this;
}
void ImToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImToken::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.tursom.im.protobuf.ImToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_.ClearToEmpty();
  sig_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* ImToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 sig = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sig_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.tursom.im.protobuf.ImToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sig = 1;
  if (this->sig() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sig(), target);
  }

  // string uid = 2;
  if (this->uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.tursom.im.protobuf.ImToken.uid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.tursom.im.protobuf.ImToken)
  return target;
}

size_t ImToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.tursom.im.protobuf.ImToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 2;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // uint64 sig = 1;
  if (this->sig() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sig());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImToken::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ImToken*>(
      &from));
}

void ImToken::MergeFrom(const ImToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cn.tursom.im.protobuf.ImToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid().size() > 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.sig() != 0) {
    _internal_set_sig(from._internal_sig());
  }
}

void ImToken::CopyFrom(const ImToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.tursom.im.protobuf.ImToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImToken::IsInitialized() const {
  return true;
}

void ImToken::InternalSwap(ImToken* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  uid_.Swap(&other->uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sig_, other->sig_);
}

std::string ImToken::GetTypeName() const {
  return "cn.tursom.im.protobuf.ImToken";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace im
}  // namespace tursom
}  // namespace cn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cn::tursom::im::protobuf::ImToken* Arena::CreateMaybeMessage< ::cn::tursom::im::protobuf::ImToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::tursom::im::protobuf::ImToken >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
